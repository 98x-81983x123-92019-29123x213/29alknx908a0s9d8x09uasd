--[=[
 d888b  db    db d888888b      .d888b.      db      db    db  .d8b.  
88' Y8b 88    88   `88'        VP  `8D      88      88    88 d8' `8b 
88      88    88    88            odD'      88      88    88 88ooo88 
88  ooo 88    88    88          .88'        88      88    88 88~~~88 
88. ~8~ 88b  d88   .88.        j88.         88booo. 88b  d88 88   88    @uniquadev
 Y888P  ~Y8888P' Y888888P      888888D      Y88888P ~Y8888P' YP   YP  CONVERTER 
]=]

-- Instances: 44 | Scripts: 7 | Modules: 0 | Tags: 0
local allowedPlaces = {
    [6839171747] = true -- Your actual in-game PlaceId
}

local doorsLobbyId = 6516141723 -- DOORS lobby PlaceId

-- SendNotification helper
local function notify(title, text, duration)
    pcall(function()
        game.StarterGui:SetCore("SendNotification", {
            Title = title,
            Text = text,
            Duration = duration or 5
        })
    end)
end

if game.PlaceId == doorsLobbyId then
    notify("Nexam Hub", "You're in the DOORS lobby. Join a match to continue.")
    return
end

if not allowedPlaces[game.PlaceId] then
    notify("Nexam Hub", "Join DOORS to use this script.")
    return
end

-- ✅ UI loading continues here (only if in allowed game, not lobby)
-- Insert your UI script here



local function loadUI()
          local Loadtime = tick()
local Repository = "https://raw.githubusercontent.com/geoduude/Obsidian/main/"

local Library = loadstring(game:HttpGet(Repository .. "Library.lua"))()
local ThemeManager = loadstring(game:HttpGet(Repository .. "addons/ThemeManager.lua"))()
local SaveManager = loadstring(game:HttpGet(Repository .. "addons/SaveManager.lua"))()

local ErrorMessageOut
ErrorMessageOut = game:GetService("LogService").MessageOut:Connect(function(Message, Type)

    if Type == Enum.MessageType.MessageError and not string.find(Message, "attempt to index nil with 'Value'") then
        ErrorMessageOut:Disconnect()

        setclipboard("Executor: " .. identifyexecutor() .. "\n\n" .. tostring(Message))
        Library:Notify("Your Executor is too Weak to Support this! Or You loaded to soon!", 4.5)

        task.delay(5, function()
            Library:Unload()
        end)
    end

end)
local LocalPlayer = game.Players.LocalPlayer

local Options = Library.Options
local Toggles = Library.Toggles



-- UI vvv

local WindowFooter = "https://discord.gg/brF4SWt2Cf | Nexam Hub Doors V1.0.0 | " .. LocalPlayer.Name

local Window = Library:CreateWindow({ Title = "Nexam Hub | Doors", Footer = WindowFooter, Center = true, AutoShow = true, Size = UDim2.fromOffset(700, 650) })
local Tabs = { General = Window:AddTab("Main"), Exploit = Window:AddTab("Modifications"), Visuals = Window:AddTab("Visuals/Esps"), Misc = Window:AddTab("Misc"), Credits = Window:AddTab("Credits"), Config = Window:AddTab("Config") }

-- Credits Tab and Groupbox
local Credita = Tabs.Credits:AddLeftGroupbox("Information")

Credita:AddLabel("Created by Nexam Hub")
Credita:AddLabel("Credits to LOLhax")

Credita:AddDivider()

Credita:AddButton("Join Discord", {
    Text = "Join Discord",
    Func = function()
        setclipboard("https://discord.gg/zJSY2eP4CQ")
    end,
    DoubleClick = false, -- Only click once
    Tooltip = "Copies the Discord invite to your clipboard."
})


local MiscMovement = Tabs.General:AddLeftGroupbox("Movement")
MiscMovement:AddToggle("MM_Fly", { Text = "Fly", Default = false }):AddKeyPicker("MM_Fly_K", { Default = "F", SyncToggleState = false, Mode = "Toggle", Text = "Fly", NoUI = false })
MiscMovement:AddSlider("MM_Fly_S", { Text = "Flying Speed", Default = 20, Min = 10, Max = 100, Rounding = 0, Compact = true, Tooltip = "Controls the fly speed." })
MiscMovement:AddDivider()
MiscMovement:AddToggle("MM_Walkspeed", { Text = "Enable Speedhack", Default = false, Tooltip = "Sets player speed according to value set." })
MiscMovement:AddSlider("MM_Walkspeed_S", { Text = "Walkspeed", Default = 20, Min = 10, Max = 50, Rounding = 0, Compact = true, Tooltip = "Controls the player walkspeed amount." })
MiscMovement:AddSlider("MM_Walkspeed_Boost", { Text = "Ladder Speed Boost", Default = 0, Min = 0, Max = 50, Rounding = 0, Compact = true, Tooltip = "Speed boost for climbing up ladders. High values may become unstable." })
MiscMovement:AddDivider()
MiscMovement:AddToggle("MM_NoAcceleration", { Text = "No Acceleration", Default = false, Tooltip = "Removes acceleration while moving or switching direction." })

local ExploitBypass = Tabs.General:AddRightGroupbox("Bypass")
ExploitBypass:AddToggle("EB_CrouchSpoof", { Text = "Fake Crouching", Default = false, Tooltip = "Tricks the game into thinking you're crouching (Useful for figure)" })
ExploitBypass:AddToggle("EB_SpeedBypass", { Text = "Speed Bypass", Default = false, Tooltip = "Removes the speed anticheat" })
ExploitBypass:AddToggle("EB_ACManipulate", { Text = "Anti Cheat Manipulation", Default = false}):AddKeyPicker("EB_ACManipulate_K", { Default = "T", SyncToggleState = false, Mode = "Hold", Text = "Anti-Cheat Manipulate", NoUI = false, })


local GeneralAutomation = Tabs.General:AddLeftGroupbox("Automatics")
GeneralAutomation:AddToggle("GA_AutoInteract", { Text = "Auto Interact", Default = false, }):AddKeyPicker("GA_AutoInteract_K", { Default = "R", SyncToggleState = false, Mode = "Hold", Text = "Auto Interact", NoUI = false, Tooltip = "Will toggle any nearby interactables" })
GeneralAutomation:AddDropdown("GA_AutoInteract_Options", { Values = { "Use Lockpick ( Doors )", "Use Lockpick ( Other )", "Ignore Light Sources", "Ignore Can-Die" }, Default = 0, Multi = true, Text = "Automatic Interact Options" })
GeneralAutomation:AddSlider("GA_AutoInteract_Range", { Text = "Range Multiplier", Default = 1, Min = 1, Max = 2, Rounding = 1, Compact = true })
GeneralAutomation:AddDivider()

GeneralAutomation:AddToggle("GA_AutoPowerup", { Text = "Auto Powerup Pickup", Default = false, Tooltip = "Will pick up power ups on the map if any are available" })
GeneralAutomation:AddToggle("GA_AutoHide", { Text = "Auto Hide", Default = false, Tooltip = "Will predict entities and will hide in the nearest available hiding spot" })
GeneralAutomation:AddToggle("GA_AutoHide_VisCheck", { Text = "Prediction Visible Check", Default = false, })
GeneralAutomation:AddSlider("GA_AutoHide_PredictionTime", { Text = "Prediction Time", Default = 0.5, Min = 0.1, Max = 1.5, Rounding = 2, Compact = true, Suffix = "s" })
GeneralAutomation:AddSlider("GA_AutoHide_PredictionDistanceMultiplier", { Text = "Distance Multiplier", Default = 1, Min = 0.8, Max = 1.5, Rounding = 1, Compact = true, Suffix = "x" })
GeneralAutomation:AddDivider()
GeneralAutomation:AddToggle("GA_AnchorAutoSolve", { Text = "Auto Anchor Solve", Default = false, Tooltip = "Solves any anchor when close enough" })
GeneralAutomation:AddToggle("GA_BreakerAutoSolve", { Text = "Auto Breaker Solve", Default = false, Tooltip = "Solves the hotel door 100 breaker minigame" })
GeneralAutomation:AddDivider()
GeneralAutomation:AddToggle("GA_AutoPadlockSolve", { Text = "Auto Padlock", Default = false, Tooltip = "Unlocks padlock with the code when near enough to the set distance" })
GeneralAutomation:AddSlider("GA_AutoPadlockSolve_Distance", { Text = "Auto Padlock Distance", Default = 25, Min = 10, Max = 50, Rounding = 0, Compact = true, Tooltip = "Set distance for auto padlock solver"})

local GeneralNotifying = Tabs.General:AddRightGroupbox("Notifications")
GeneralNotifying:AddToggle("GN_Enabled", { Text = "Enabled", Default = false, Tooltip = "Enable or Disable Notifications." })
GeneralNotifying:AddToggle("GN_NotificationSound", { Text = "Play Sound", Default = false, Tooltip = "Plays a sound when a notification occurs to bring your attention" })
GeneralNotifying:AddSlider("GN_NotificationSound_Volume", { Text = "Sound Volume", Default = 2, Min = 1, Max = 10, Rounding = 1, Compact = true })
GeneralNotifying:AddDivider()
GeneralNotifying:AddToggle("GN_AnchorCode", { Text = "Anchor Code", Default = false, Tooltip = "Sends a notification upon any anchor code being confirmed" })
GeneralNotifying:AddToggle("GN_PadlockCode", { Text = "Library Padlock Code", Default = false, Tooltip = "Sends a notification upon padlock code being confirmed" })
GeneralNotifying:AddToggle("GN_Entities", { Text = "Entity Notifying", Default = false, Tooltip = "Sends a notification when an entity spawns" })
GeneralNotifying:AddDropdown("GN_Entities_Options", { Values = { "Rush", "Custom Rush", "Blitz", "Ambush", "Eyes", "Lookman", "Halt", "Screech", "Gloombat Swarm", "Dread", "A-60", "A-120" }, Default = 0, Multi = true, Text = "Entity List", Tooltip = "Entity whitelist to notify for." })
GeneralNotifying:AddDivider()
GeneralNotifying:AddDropdown("GN_NotificationAlignment", { Values = { "Left", "Center", "Right" }, Default = 2, Multi = false, Text = "Horizontal Alignment" })
GeneralNotifying:AddSlider("GN_NotificationOffset_X", { Text = "X Offset", Default = 0, Min = -1, Max = 1, Rounding = 2, Compact = true })
GeneralNotifying:AddSlider("GN_NotificationOffset_Y", { Text = "Y Offset", Default = 0, Min = -1, Max = 1, Rounding = 2, Compact = true })
GeneralNotifying:AddSlider("GN_NotificationDPISize", { Text = "Size Multiplier", Default = 1, Min = 0.8, Max = 3, Rounding = 1, Compact = true })


local ExploitSelf = Tabs.Exploit:AddLeftGroupbox("You")
ExploitSelf:AddToggle("ES_AlwaysJump", { Text = "Always Enable Jumping", Default = false, Tooltip = "Enables jumping at all times" })
ExploitSelf:AddDivider()
ExploitSelf:AddToggle("ES_AntiGloombat", { Text = "Anti-Gloombat Egg", Default = false, Tooltip = "Disallows touching on any Gloombat egg" })
ExploitSelf:AddToggle("ES_AntiGiggle", { Text = "Anti-Giggle", Default = false, Tooltip = "Disallows touching on the entity 'Giggle'" })
ExploitSelf:AddToggle("ES_AntiSnare", { Text = "Anti-Snare", Default = false, Tooltip = "Disallows touching on the entity 'Snare'" })
ExploitSelf:AddToggle("ES_AntiDupe", { Text = "Anti-Dupe", Default = false, Tooltip = "Disallows touching on any entity 'Dupe' fake doors" })
ExploitSelf:AddToggle("ES_AntiEyes", { Text = "Anti-Eyes", Default = false, Tooltip = "Forces character to look down from the entity 'Eyes'" })
ExploitSelf:AddToggle("ES_AntiLookman", { Text = "Anti-Lookman", Default = false, Tooltip = "Forces character to look down from the entity 'Lookman'" })
ExploitSelf:AddToggle("ES_AntiChanedlier", { Text = "Anti-Chandelier", Default = false, Tooltip = "Disallows touching on any fallen chandeliers during the seek chase" })
ExploitSelf:AddToggle("ES_AntiSeekArms", { Text = "Anti-Seek Arms", Default = false, Tooltip = "Disallows touching on any seek arms during the seek chase" })


local ExploitRemovals = Tabs.Exploit:AddRightGroupbox("Entity Removals")
ExploitRemovals:AddToggle("ER_NoScreech", { Text = "No Screech", Default = false, Tooltip = "Completely disables the entity 'Screech'." })
ExploitRemovals:AddToggle("ER_NoA90", { Text = "No A-90", Default = false, Tooltip = "Completely disables the entity 'A-90'." })
ExploitRemovals:AddToggle("ER_NoShade", { Text = "No Halt", Default = false, Tooltip = "Completely disables the entity 'Halt'." })


local ESPEntities = Tabs.Visuals:AddLeftGroupbox("Entities")
ESPEntities:AddToggle("ESPE_Enabled", { Text = "Enabled", Default = false })
ESPEntities:AddDivider()
ESPEntities:AddToggle("ESPE_Name", { Text = "Name", Default = false })
ESPEntities:AddToggle("ESPE_Distance", { Text = "Distance", Default = false })
ESPEntities:AddToggle("ESPE_Fill", { Text = "Highlight Fill", Default = false })
ESPEntities:AddToggle("ESPE_Outline", { Text = "Highlight Outline", Default = false })

local ESPPlayers = Tabs.Visuals:AddLeftGroupbox("Players")
ESPPlayers:AddToggle("ESPP_Enabled", { Text = "Enabled", Default = false })
:AddColorPicker("ESPP_Color_F", { Default = Color3.new(0, 1, 0.5), Title = "Fill Color" })
:AddColorPicker("ESPP_Color_O", { Default = Color3.new(0, 0, 0), Title = "Outline Color" })
ESPPlayers:AddDivider()
ESPPlayers:AddToggle("ESPP_Name", { Text = "Name", Default = false })
ESPPlayers:AddToggle("ESPP_Distance", { Text = "Distance", Default = false })
ESPPlayers:AddToggle("ESPP_Fill", { Text = "Highlight Fill", Default = false })
ESPPlayers:AddToggle("ESPP_Outline", { Text = "Highlight Outline", Default = false })

local ESPInteractables = Tabs.Visuals:AddRightTabbox("Interactables")

local ESPInteractables_Main = ESPInteractables:AddTab("Main")
ESPInteractables_Main:AddToggle("ESPI_M_Enabled", { Text = "Enabled", Default = false })
ESPInteractables_Main:AddDivider()
ESPInteractables_Main:AddToggle("ESPI_M_Name", { Text = "Name", Default = false })
ESPInteractables_Main:AddToggle("ESPI_M_Distance", { Text = "Distance", Default = false })
ESPInteractables_Main:AddToggle("ESPI_M_Fill", { Text = "Highlight Fill", Default = false })
ESPInteractables_Main:AddToggle("ESPI_M_Outline", { Text = "Highlight Outline", Default = false })

-- BRO IM SO SORRY LINORIA MADE ME DO IT THIS WAY PLEASE LORD FORGIVE ME
local ESPInteractables_Configurate = ESPInteractables:AddTab("Configurate")
ESPInteractables_Configurate:AddToggle("ESPI_C_Doors", { Text = "Door", Default = false })
:AddColorPicker("ESPI_C_Doors_F", { Default = Color3.new(1, 1, 1), Title = "Fill Color" })
:AddColorPicker("ESPI_C_Doors_O", { Default = Color3.new(1, 1, 1), Title = "Outline Color" })

ESPInteractables_Configurate:AddToggle("ESPI_C_DoorKeys", { Text = "Door Key", Default = false })
:AddColorPicker("ESPI_C_DoorKeys_F", { Default = Color3.new(1, 1, 1), Title = "Fill Color" })
:AddColorPicker("ESPI_C_DoorKeys_O", { Default = Color3.new(1, 1, 1), Title = "Outline Color" })

ESPInteractables_Configurate:AddToggle("ESPI_C_GoldPiles", { Text = "Gold Piles", Default = false })
:AddColorPicker("ESPI_C_GoldPiles_F", { Default = Color3.new(1, 1, 1), Title = "Fill Color" })
:AddColorPicker("ESPI_C_GoldPiles_O", { Default = Color3.new(1, 1, 1), Title = "Outline Color" })

ESPInteractables_Configurate:AddToggle("ESPI_C_GeneratorFuses", { Text = "Generator Fuse", Default = false })
:AddColorPicker("ESPI_C_GeneratorFuses_F", { Default = Color3.new(1, 1, 1), Title = "Fill Color" })
:AddColorPicker("ESPI_C_GeneratorFuses_O", { Default = Color3.new(1, 1, 1), Title = "Outline Color" })

ESPInteractables_Configurate:AddToggle("ESPI_C_Generators", { Text = "Generator", Default = false })
:AddColorPicker("ESPI_C_Generators_F", { Default = Color3.new(1, 1, 1), Title = "Fill Color" })
:AddColorPicker("ESPI_C_Generators_O", { Default = Color3.new(1, 1, 1), Title = "Outline Color" })

ESPInteractables_Configurate:AddToggle("ESPI_C_GateLevers", { Text = "Gate Lever", Default = false })
:AddColorPicker("ESPI_C_GateLevers_F", { Default = Color3.new(1, 1, 1), Title = "Fill Color" })
:AddColorPicker("ESPI_C_GateLevers_O", { Default = Color3.new(1, 1, 1), Title = "Outline Color" })

ESPInteractables_Configurate:AddToggle("ESPI_C_LibraryBooks", { Text = "Library Book", Default = false })
:AddColorPicker("ESPI_C_LibraryBooks_F", { Default = Color3.new(1, 1, 1), Title = "Fill Color" })
:AddColorPicker("ESPI_C_LibraryBooks_O", { Default = Color3.new(1, 1, 1), Title = "Outline Color" })

ESPInteractables_Configurate:AddToggle("ESPI_C_BreakerPoles", { Text = "Breaker Pole", Default = false })
:AddColorPicker("ESPI_C_BreakerPoles_F", { Default = Color3.new(1, 1, 1), Title = "Fill Color" })
:AddColorPicker("ESPI_C_BreakerPoles_O", { Default = Color3.new(1, 1, 1), Title = "Outline Color" })

ESPInteractables_Configurate:AddToggle("ESPI_C_Anchors", { Text = "Anchor", Default = false })
:AddColorPicker("ESPI_C_Anchors_F", { Default = Color3.new(1, 1, 1), Title = "Fill Color" })
:AddColorPicker("ESPI_C_Anchors_O", { Default = Color3.new(1, 1, 1), Title = "Outline Color" })

ESPInteractables_Configurate:AddToggle("ESPI_C_BackroomsLevers", { Text = "Timer Lever", Default = false })
:AddColorPicker("ESPI_C_BackroomsLevers_F", { Default = Color3.new(1, 1, 1), Title = "Fill Color" })
:AddColorPicker("ESPI_C_BackroomsLevers_O", { Default = Color3.new(1, 1, 1), Title = "Outline Color" })

ESPInteractables_Configurate:AddToggle("ESPI_C_WaterPumps", { Text = "Water Pump", Default = false })
:AddColorPicker("ESPI_C_WaterPumps_F", { Default = Color3.new(1, 1, 1), Title = "Fill Color" })
:AddColorPicker("ESPI_C_WaterPumps_O", { Default = Color3.new(1, 1, 1), Title = "Outline Color" })

ESPInteractables_Configurate:AddToggle("ESPI_C_MiscPickups", { Text = "Misc Items", Default = false })
:AddColorPicker("ESPI_C_MiscPickups_F", { Default = Color3.new(1, 1, 1), Title = "Fill Color" })
:AddColorPicker("ESPI_C_MiscPickups_O", { Default = Color3.new(1, 1, 1), Title = "Outline Color" })

local ESPSettings = Tabs.Visuals:AddRightGroupbox("ESP Settings")
ESPSettings:AddDropdown("ESPS_Font", { Values = { "Arial", "SourceSans", "Highway", "Fantasy", "Gotham", "DenkOne", "JosefinSans", "Nunito", "Oswald", "RobotoMono", "Sarpanch", "Ubuntu" }, Default = 9, Multi = false, Text = "Text Font" })
ESPSettings:AddSlider("ESPS_FontSize", { Text = "Font Size", Default = 20, Min = 10, Max = 32, Rounding = 0, Compact = true })
ESPSettings:AddDivider()
ESPSettings:AddSlider("ESPS_FillTransparency", { Text = "Fill Transparency", Default = 0.7, Min = 0, Max = 1, Rounding = 2, Compact = true })
ESPSettings:AddSlider("ESPS_OutlineTransparency", { Text = "Outline Transparency", Default = 0.2, Min = 0, Max = 1, Rounding = 2, Compact = true })
ESPSettings:AddDivider()
ESPSettings:AddSlider("ESPS_FadeTime", { Text = "Fade In / Out Time", Default = 0.5, Min = 0, Max = 2, Rounding = 2, Compact = true, Suffix = "s" })

local VisualsView = Tabs.Misc:AddLeftGroupbox("View")
VisualsView:AddSlider("VV_FieldOfView", { Text = "Field of View", Default = 0, Min = 0, Max = 120, Rounding = 0, Compact = true, Tooltip = "Changes camera field of view" })
VisualsView:AddToggle("VV_TransparentLocker", { Text = "Transparent Closets", Default = false, Tooltip = "Makes any lockers you hide into transparent." })
VisualsView:AddToggle("VV_NoCamShake", { Text = "No Camera Shake", Default = false, Tooltip = "Removes any camera shaking that will occur from entities or other things" })
VisualsView:AddToggle("VV_NoLookBob", { Text = "No Look Bobbing", Default = false, Tooltip = "Removes any look bobbing that will occur when walking." })
VisualsView:AddDivider()
VisualsView:AddToggle("VV_Thirdperson", { Text = "Thirdperson", Default = false, Tooltip = "Changes camera visibility to view local character from the third person" }):AddKeyPicker("VV_Thirdperson_K", { Default = "V", SyncToggleState = false, Mode = "Toggle", Text = "Thirdperson", NoUI = false })
VisualsView:AddToggle("VV_ThirdpersonCamCollision", { Text = "Wall Detect", Default = false, Tooltip = "Makes the camera position on a detected wall if there are any, for the sake of visibility" })
VisualsView:AddSlider("VV_ThirdpersonDistance", { Text = "Distance", Default = 10, Min = 5, Max = 30, Rounding = 0, Compact = true, Tooltip = "Camera distance for thirdperson" })
VisualsView:AddSlider("VV_ThirdpersonOffset", { Text = "Offset", Default = 0, Min = -5, Max = 5, Rounding = 1, Compact = true, Tooltip = "Camera left/right offset for thirdperson" })
VisualsView:AddSlider("VV_ThirdpersonOffsetUp", { Text = "Vertical Offset", Default = 0, Min = -5, Max = 5, Rounding = 1, Compact = true, Tooltip = "Camera up/down offset for thirdperson" })
VisualsView:AddDivider()
VisualsView:AddToggle("VV_ViewmodelOffset", { Text = "Viewmodel Offset", Default = false, Tooltip = "Modifier for character viewmodel when holding tools." })
VisualsView:AddSlider("VV_ViewmodelOffset_X", { Text = "X", Default = 0, Min = -5, Max = 5, Rounding = 1, Compact = true, })
VisualsView:AddSlider("VV_ViewmodelOffset_Y", { Text = "Y", Default = 0, Min = -5, Max = 5, Rounding = 1, Compact = true, })
VisualsView:AddSlider("VV_ViewmodelOffset_Z", { Text = "Z", Default = 0, Min = -5, Max = 5, Rounding = 1, Compact = true, })

local VisualsWorld = Tabs.Visuals:AddRightGroupbox("World")
VisualsWorld:AddToggle("VW_Ambience", { Text = "Ambience", Default = false, Tooltip = "Changes color of the map." }):AddColorPicker("VW_Ambience_C", { Default = Color3.new(1, 1, 1), Title = "Ambience Color" })
VisualsWorld:AddToggle("VW_NoFog", { Text = "Remove Fog", Default = false, Tooltip = "Removes map fog if available." })


local VisualsRemovals = Tabs.Visuals:AddLeftGroupbox("Removals")
VisualsRemovals:AddToggle("VR_NoHasteEffect", { Text = "No Haste Effects", Default = false, Tooltip = "Removes vignette and red color correction effect when haste spawns" })
VisualsRemovals:AddToggle("VR_NoHidingVignette", { Text = "No Hiding Vignette", Default = false, Tooltip = "Removes screen vignette when hiding" })
VisualsRemovals:AddToggle("VR_NoHaltEffect", { Text = "No Halt Effects", Default = false, Tooltip = "Removes flashing effects during halt room" })
VisualsRemovals:AddToggle("VR_NoReviveCutscene", { Text = "No Revive Cutscene", Default = false, Tooltip = "Removes the heart cutscene when reviving" })
VisualsRemovals:AddDivider()
VisualsRemovals:AddToggle("VR_TimothyJumpscare", { Text = "Remove Timothy Jumpscare", Default = false, Tooltip = "Removes the jumpscare upon timothy spawning" })
VisualsRemovals:AddToggle("VR_NoGlitchJumpscare", { Text = "Remove Glitch Jumpscare", Default = false, Tooltip = "Removes the client sided glitch jumpscare" })
VisualsRemovals:AddToggle("VR_NoVoidEffect", { Text = "Remove Void Jumpscare", Default = false, Tooltip = "Removes the client sided void effect" })
VisualsRemovals:AddToggle("VR_NoSeekEffects", { Text = "Remove Seek Room Effects", Default = false, Tooltip = "Removes the seek eyes and texture effects during the teasing and chase" })



local MiscAudio = Tabs.Misc:AddRightGroupbox("Audio")
MiscAudio:AddToggle("MA_SilentJammin", { Text = "Silent Jammin Modifier", Default = false, Tooltip = "Removes the jeffs shop jammin modifier music" })
MiscAudio:AddDivider()
MiscAudio:AddToggle("MA_NoHasteSound", { Text = "No Haste Sounds", Default = false, Tooltip = "Mutes the extremely obnoxious ambience when haste spawns" })
MiscAudio:AddToggle("MA_SilentInteracting", { Text = "No Interacting Sound", Default = false, Tooltip = "Mutes sound when interacting with a prompt" })
MiscAudio:AddToggle("MA_NoRandomAmbience", { Text = "No Random Ambience", Default = false, Tooltip = "Removes any random noise ambience that may occur" })
MiscAudio:AddToggle("MA_SilentGloombat", { Text = "Silent Gloombats", Default = false, Tooltip = "Makes any gloombat flying and roaring silent" })
--MiscAudio:AddToggle("MA_NoFigureFootsteps", { Text = "Silent Figure Steps", Default = false, Tooltip = "Removes figure footsteps." })

local MiscellaneousOther = Tabs.Misc:AddRightGroupbox("Extra")
MiscellaneousOther:AddButton("Play Again", function()
    game.ReplicatedStorage.RemotesFolder.PlayAgain:FireServer()
end)
MiscellaneousOther:AddButton("Lobby", function()
    game.ReplicatedStorage.RemotesFolder.Lobby:FireServer()
end)
MiscellaneousOther:AddButton("Revive", function()
    game.ReplicatedStorage.RemotesFolder.Revive:FireServer()
end)

-- Variables vvv

local A90Hook
local ScreechHook
local TimothyHook

LocalPlayer.Character:SetAttribute("CanJump", LocalPlayer.Character:GetAttribute("CanJump") or false) 
local CanJump = LocalPlayer.Character:GetAttribute("CanJump")

LocalPlayer.Character:SetAttribute("SpeedBoost", LocalPlayer.Character:GetAttribute("SpeedBoost") or 0)
LocalPlayer.Character:SetAttribute("SpeedBoostBehind", LocalPlayer.Character:GetAttribute("SpeedBoost") or 0)
LocalPlayer.Character:SetAttribute("SpeedBoostExtra", LocalPlayer.Character:GetAttribute("SpeedBoost") or 0)

local OldAccel = LocalPlayer.Character.HumanoidRootPart.CustomPhysicalProperties

local PadlockCode
local PadlockCode_N
local OldFog

local Atmosphere = game.Lighting:FindFirstChildWhichIsA("Atmosphere")
if Atmosphere then
    OldFog = Atmosphere.Density
end

local OldFogEnd = game.Lighting.FogEnd

-- Require Variables vvv

local Main_Game = require(LocalPlayer.PlayerGui.MainUI.Initiator.Main_Game)

local ShadeModule = require(game.ReplicatedStorage.ClientModules.EntityModules.Shade)
local GlitchModule = require(game.ReplicatedStorage.ClientModules.EntityModules.Glitch)
local VoidModule = require(game.ReplicatedStorage.ClientModules.EntityModules.Void)
local SeekModule = require(game.ReplicatedStorage.ClientModules.EntityModules.Seek)

local ShadeFunction = ShadeModule.stuff
local GlitchFunction = GlitchModule.stuff
local VoidFunction = VoidModule.stuff
local SeekFunction = SeekModule.tease

-- Instance Variables vvv

local Rooms = workspace.CurrentRooms

local ThirdpersonParts = Instance.new("Folder", workspace)
ThirdpersonParts.Name = "_ThirdpersonParts"

local LXNotifications = Instance.new("ScreenGui", game.CoreGui)
LXNotifications.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
LXNotifications.ScreenInsets = Enum.ScreenInsets.None
LXNotifications.Name = "_LXNotifications"

local NotificationHolder = Instance.new("Frame", LXNotifications)
NotificationHolder.Size = UDim2.fromScale(1, 1)
NotificationHolder.Transparency = 1

local ClonedCollision = LocalPlayer.Character.Collision:Clone()
ClonedCollision.Name = "_CollisionClone"
ClonedCollision.Massless = true
ClonedCollision.Parent = LocalPlayer.Character
ClonedCollision.CanCollide = false
ClonedCollision.CanQuery = false
ClonedCollision.CustomPhysicalProperties = PhysicalProperties.new(0.01, 0.7, 0, 1, 1)
if ClonedCollision:FindFirstChild("CollisionCrouch") then
    ClonedCollision.CollisionCrouch:Destroy()
end

-- Table Variables vvv

local ClosetConnections = {}
local BreakerAlreadyDone = {}

local AnchorIdentify = {
    ["A"] = 1,
    ["B"] = 2,
    ["C"] = 3,
    ["D"] = 4,
    ["E"] = 5,
    ["F"] = 6
}
local EntityDistances = {
    ["RushMoving"] = 50,
    ["BackdoorRush"] = 50,
    ["AmbushMoving"] = 100,
    ["A60"] = 100,
    ["A120"] = 35
}
local LightSources = {
    "Flashlight",
    "Candle",
    "Straplight",
    "Lighter",
    "LaserPointer",
    "Bulklight",
    "Glowsticks"
}

local MiscPickups = {
    ["Glowsticks"] = "Glowstick",
    ["StarJug"] = "Barrel of Starlight",
    ["Lockpick"] = "Lock-Pick",
    ["Bandage"] = "Bandage",
    ["StarVial"] = "Vial of Starlight",
    ["SkeletonKey"] = "Skeleton Key",
    ["Crucifix"] = "Crucifix",
    ["CrucifixWall"] = "Crucifix",
    ["Flashlight"] = "Flashlight",
    ["Candle"] = "Candle",
    ["Straplight"] = "Straplight",
    ["Vitamins"] = "Vitamins",
    ["Lighter"] = "Lighter",
    ["Shears"] = "Shears",
    ["BatteryPack"] = "Battery Pack",
    ["BandagePack"] = "Bandage Pack",
    ["LaserPointer"] = "Laser Pointer",
    ["Bulklight"] = "Bulk Light",
    ["Battery"] = "Battery",
    ["Candy"] = "Candy",
    ["Smoothie"] = "Smoothie",
}
local EspTable = {
    Interactables = {
        GoldPiles = {},
        Doors = {},
        DoorKeys = {},
        GeneratorFuses = {},
        Generators = {},
        GateLevers = {},
        BackroomsLevers = {},
        LibraryBooks = {},
        BreakerPoles = {},
        WaterPumps = {},
        Anchors = {},

        MiscPickups = {}
    },

    Entities = {},
    Players = {}
}

task.spawn(function()
	while task.wait() and not Library.Unloaded do
        if Toggles.DS_Debug and Toggles.DS_Debug.Value then
            for _, Table in EspTable.Interactables do
        
                for i, v in Table do
                    print(i, unpack(v))
                end

            end
            for i, v in EspTable.Entities do
        
                print(i, unpack(v))

            end
        end
	end
end)

-- Functions vvv

local GlobalOffset = 0
function Notify(TitleText, SubText, Duration, Force)
    if not Force then
        if not Toggles.GN_Enabled.Value then return end
    end

    local DPISize = Options.GN_NotificationDPISize.Value

    local Offset = GlobalOffset
    GlobalOffset += 0.05 * DPISize

    local MainColor = Options.AccentColor.Value
    local Alignment = 0.5
    if Options.GN_NotificationAlignment.Value == "Left" then
        Alignment = 1
    elseif Options.GN_NotificationAlignment.Value == "Right" then
        Alignment = 0
    end

    local Main = Instance.new("Frame", NotificationHolder)
    Main.AnchorPoint = Vector2.new(1, 0)
    Main.Size = UDim2.fromScale(0.19 * DPISize, 0.045 * DPISize)
    Main.Position = UDim2.fromScale(0.98, 0.05)
    Main.Transparency = 1

    local Line = Instance.new("Frame", Main)
    Line.AnchorPoint = Vector2.new(0, 1)
    Line.BorderSizePixel = 0
    Line.Position = UDim2.fromScale(0, 1)
    Line.Size = UDim2.fromScale(0.98, 0.05)
    Line.Transparency = 1

    local LXLogo = Instance.new("ImageLabel", Main)
    LXLogo.AnchorPoint = Vector2.new(0.5, 0.5)
    LXLogo.Position = UDim2.fromScale(0.067, 0.5)
    LXLogo.Size = UDim2.fromScale(0.121, 0.9)
    LXLogo.Image = "rbxassetid://135488783479977"
    LXLogo.ScaleType = Enum.ScaleType.Fit
    LXLogo.Transparency = 1

    local Title = Instance.new("TextLabel", Main)
    Title.AnchorPoint = Vector2.new(0, 0.5)
    Title.Position = UDim2.fromScale(0.135, 0.35)
    Title.Size = UDim2.fromScale(100, 0.35)
    Title.Font = Enum.Font.SourceSans
    Title.Text = "Nexam Hub | Doors" .. TitleText
    Title.TextScaled = true
    Title.TextSize = 1
    Title.TextStrokeTransparency = 0.5
    Title.TextXAlignment = Enum.TextXAlignment.Left
    Title.Transparency = 1

    local Description = Instance.new("TextLabel", Main)
    Description.AnchorPoint = Vector2.new(0, 0.5)
    Description.Position = UDim2.fromScale(0.135, 0.667)
    Description.Size = UDim2.fromScale(100, 0.29)
    Description.Font = Enum.Font.SourceSans
    Description.Text = SubText
    Description.TextScaled = true
    Description.TextSize = 1
    Description.TextStrokeTransparency = 0.5
    Description.TextXAlignment = Enum.TextXAlignment.Left
    Description.Transparency = 1

    local Number = math.max(Title.TextBounds.X, Description.TextBounds.X) * 1.125
    local FinalOffset = math.clamp(Number - 265, 0, 9e9)

    Main.Size += UDim2.fromOffset(FinalOffset, 0)

    if Toggles.GN_NotificationSound.Value then
        local Sound = Instance.new("Sound", game.CoreGui)
        Sound.SoundId = "rbxassetid://3318713980"
        Sound.Volume = Options.GN_NotificationSound_Volume.Value

        Sound.PlayOnRemove = true
        Sound:Destroy()
    end

    local Timer = Duration or 10 / 3

    -- cant do an onchanged event.. ;w;
local LockColor = game:GetService("RunService").RenderStepped:Connect(function()
    MainColor = Options.AccentColor.Value

    -- Force the main background to a darker gray (instead of purple)
    Main.BackgroundColor3 = Color3.fromRGB(30, 30, 30) -- Dark gray background
    Main.BorderColor3 = Color3.fromRGB(50, 50, 50) -- Slightly lighter gray border

    Line.BackgroundColor3 = Color3.fromRGB(70, 70, 70) -- Line color (medium gray)

    LXLogo.ImageColor3 = Color3.fromRGB(180, 180, 180) -- Light gray logo

    Title.TextColor3 = Color3.fromRGB(200, 200, 200) -- Title text light gray
    Title.TextStrokeColor3 = Color3.fromRGB(50, 50, 50) -- Dark gray stroke

    Description.TextColor3 = Color3.fromRGB(160, 160, 160) -- Lighter description text
    Description.TextStrokeColor3 = Color3.fromRGB(50, 50, 50) -- Dark gray stroke
end)


-- Show UI (fade in)
local Info = TweenInfo.new(4 / 3, Enum.EasingStyle.Quart, Enum.EasingDirection.Out)

-- No position tweening, since it's already placed top-right
game:GetService("TweenService"):Create(Main, Info, {Transparency = 0.35}):Play()
game:GetService("TweenService"):Create(Line, Info, {Transparency = 0}):Play()
game:GetService("TweenService"):Create(LXLogo, Info, {ImageTransparency = 0}):Play()
game:GetService("TweenService"):Create(Title, Info, {TextTransparency = 0}):Play()
game:GetService("TweenService"):Create(Description, Info, {TextTransparency = 0}):Play()

-- Animate bottom bar fill
Line:TweenSize(UDim2.fromScale(1, 0.03), "Out", "Linear", Timer)

-- Delay before fade-out
task.delay(Timer + 0.1, function()
    local InfoOut = TweenInfo.new(0.5, Enum.EasingStyle.Quart, Enum.EasingDirection.In)

    game:GetService("TweenService"):Create(Main, InfoOut, {Transparency = 1}):Play()
    game:GetService("TweenService"):Create(Line, InfoOut, {Transparency = 1}):Play()
    game:GetService("TweenService"):Create(LXLogo, InfoOut, {ImageTransparency = 1}):Play()
    game:GetService("TweenService"):Create(Title, InfoOut, {TextTransparency = 1}):Play()
    game:GetService("TweenService"):Create(Description, InfoOut, {TextTransparency = 1}):Play()

    -- Adjust vertical stacking offset
    GlobalOffset -= 0.05 * DPISize

    task.delay(0.5, function()
        LockColor:Disconnect()
        Main:Destroy()
    end)
end)

end

function MissingNumber(a, b)
	local Total = (b + 1) * (b + 2) / 2

	for i = 1, #a do
		Total -= a[i]
	end

	return Total 
end

function BreakerThing(Breaker, Bool)
    Breaker:SetAttribute("Enabled", Bool)

    if Breaker:GetAttribute("Enabled") then
        Breaker:FindFirstChild("PrismaticConstraint", true).TargetPosition = -0.2
        Breaker.Light.Material = Enum.Material.Neon
        Breaker.Light.Attachment.Spark:Emit(1)
        Breaker.Sound.Pitch = 1.3
    else
        Breaker:FindFirstChild("PrismaticConstraint", true).TargetPosition = 0.2
        Breaker.Light.Material = Enum.Material.Glass
        Breaker.Sound.Pitch = 1.2
    end

    Breaker.Sound:Play()
end

function HidingConnect(Closet, HiddenPlayer)
    if not Toggles.VV_TransparentLocker.Value then return end

    local PlayerChanged = HiddenPlayer:GetPropertyChangedSignal("Value"):Connect(function()
        task.wait()

        if HiddenPlayer.Value == LocalPlayer.Character then
			
            for _, Part in Closet:GetDescendants() do
				if not Part:IsA("BasePart") or Part.Transparency >= 1 then continue end

				local OldTransparency = Part.Transparency

                -- purely for cosmetic reason idk it just looks cooler if u see it going transparent
                task.delay(0.5, function()
                    game:GetService("TweenService"):Create(Part, TweenInfo.new( 1.5 ), { Transparency = 0.75 }):Play()
                end)

                HiddenPlayer:GetPropertyChangedSignal("Value"):Once(function()
                    game:GetService("TweenService"):Create(Part, TweenInfo.new( 1 ), { Transparency = OldTransparency }):Play()
				end)
			end

		end
	end)

    table.insert(ClosetConnections, PlayerChanged)
end

function HasItem(Item)
    return (LocalPlayer.Character:FindFirstChild(Item) or LocalPlayer.Backpack:FindFirstChild(Item))
end

function GetHiding()
    local Closest, Prompt

    for _, v in Rooms[LocalPlayer:GetAttribute("CurrentRoom")].Assets:GetChildren() do
        if v:IsA("Model") then

            if v.Name == "Locker_Large" or v.Name == "Wardrobe" or v.Name == "Toolshed" or v.Name == "Bed" or v.Name == "Rooms_Locker" or v.Name == "Rooms_Locker_Fridge" or v.Name == "Backdoor_Wardrobe" and v:FindFirstChild("HidePrompt") and v:FindFirstChild("HiddenPlayer") then

                if not v.HiddenPlayer.Value and not v:FindFirstChild("HideEntityOnSpot", true) then
                    if Closest then
                        if (LocalPlayer.Character.Collision.Position - v.PrimaryPart.Position).Magnitude < (Closest.PrimaryPart.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude then
                            Closest = v
                            Prompt = v.HidePrompt
                        end
                    else
                        Closest = v
                        Prompt = v.HidePrompt
                    end

                end
            elseif v.Name == "Double_Bed" then
                for _, x in v:GetChildren() do
                    if x.Name == "DoubleBed" and x:FindFirstChild("HidePrompt") and x:FindFirstChild("HiddenPlayer") then

                        if not x.HiddenPlayer.Value and not x:FindFirstChild("HideEntityOnSpot", true) then
                            if Closest then
                                if (LocalPlayer.Character.Collision.Position - x.PrimaryPart.Position).Magnitude < (Closest.PrimaryPart.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude then
                                    Closest = x
                                    Prompt = x.HidePrompt
                                end
                            else
                                Closest = x
                                Prompt = x.HidePrompt
                            end
                        end

                    end
                end
            elseif v.Name == "Dumpster" then
                for _, x in v:GetChildren() do
                    if x:FindFirstChild("HidePrompt") and x:FindFirstChild("HiddenPlayer") then

                        if not x.HiddenPlayer.Value and not v.DumpsterBase:FindFirstChild("HideEntityOnSpot") then
                            if Closest then
                                if (LocalPlayer.Character.Collision.Position - x.PrimaryPart.Position).Magnitude < (Closest.PrimaryPart.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude then
                                    Closest = x
                                    Prompt = x.HidePrompt
                                end
                            else
                                Closest = x
                                Prompt = x.HidePrompt
                            end
                        end

                    end
                end
            end

        elseif v:IsA("Folder") then

            if v.Name == "Blockage" then
                for _, x in v:GetChildren() do
                    if x:IsA("Model") and x.Name == "Wardrobe" then

                        if not x.HiddenPlayer.Value then
                            if Closest then
                                if (LocalPlayer.Character.Collision.Position - x.PrimaryPart.Position).Magnitude < (Closest.PrimaryPart.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude then
                                    Closest = x
                                    Prompt = x.HidePrompt
                                end
                            else
                                Closest = x
                                Prompt = x.HidePrompt
                            end
                        end

                    end
                end
            elseif v.Name == "Vents" then
                for _, x in v:GetChildren() do
                    if x.Name == "CircularVent" and v:FindFirstChild("Grate") and x.Grate:FindFirstChild("HidePrompt") and v:FindFirstChild("HiddenPlayer") then

                        if not x.HiddenPlayer.Value and not v:FindFirstChild("HideEntityOnSpot", true) then
                            if Closest then
                                if (LocalPlayer.Character.Collision.Position - x.PrimaryPart.Position).Magnitude < (Closest.PrimaryPart.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude then
                                    Closest = v
                                    Prompt = x.Grate.HidePrompt
                                end
                            else
                                Closest = v
                                Prompt = x.Grate.HidePrompt
                            end
                        end

                    end
                end
            end

        end
    end

    for _, v in Rooms[LocalPlayer:GetAttribute("CurrentRoom")]:GetChildren() do
        if v:IsA("Model") then
            if v.Name == "CircularVent" and v.Grate:FindFirstChild("HidePrompt") and v:FindFirstChild("HiddenPlayer") then

                if v.HiddenPlayer.Value ~= nil or v.HiddenPlayer.Value ~= "" and not v:FindFirstChild("HideEntityOnSpot", true) then
                    if Closest then
                        if (LocalPlayer.Character.Collision.Position - v.PrimaryPart.Position).Magnitude < (Closest.PrimaryPart.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude then
                            Closest = v
                            Prompt = v.Grate.HidePrompt
                        end
                    else
                        Closest = v
                        Prompt = v.Grate.HidePrompt
                    end
                end

            end
        end
    end

    return Prompt
end

function FindLoot(Origin)
    local Glowsticks = HasItem("Glowsticks")
    local BandagePack = HasItem("BandagePack")
    local BatteryPack = HasItem("BatteryPack")

    for _, Loot in Origin:GetChildren() do
        if Loot.Name == "Glowsticks" and not Options.GA_AutoInteract_Options.Value["Ignore Light Sources"] then

            if not (Glowsticks and Glowsticks:GetAttribute("Durability") >= Glowsticks:GetAttribute("DurabilityMax")) then
                if (Loot.Main.Position - LocalPlayer.Character.Collision.Position).Magnitude < Loot.ModulePrompt.MaxActivationDistance * Options.GA_AutoInteract_Range.Value then
                    fireproximityprompt(Loot.ModulePrompt)
                end
            end

        elseif Loot.Name == "GoldPile" then

            if (Loot.Hitbox.Position - LocalPlayer.Character.Collision.Position).Magnitude < Loot.LootPrompt.MaxActivationDistance * Options.GA_AutoInteract_Range.Value then
                fireproximityprompt(Loot.LootPrompt)
            end

        elseif Loot.Name == "Bandage" then

            if (LocalPlayer.Character.Humanoid.Health < 100 or (BandagePack and BandagePack:GetAttribute("Durability") < BandagePack:GetAttribute("DurabilityMax"))) then
                if (Loot.Main.Position - LocalPlayer.Character.Collision.Position).Magnitude < Loot.ModulePrompt.MaxActivationDistance * Options.GA_AutoInteract_Range.Value then
                    fireproximityprompt(Loot.ModulePrompt)
                end
            end

        elseif Loot.Name == "FuseHolder" then

            if Loot:FindFirstChild("FuseObtain") and Loot.FuseObtain.Hitbox.FuseModel.LocalTransparencyModifier <= 0 then
                if (Loot.FuseObtain.Hitbox.Position - LocalPlayer.Character.Collision.Position).Magnitude < Loot.FuseObtain.ModulePrompt.MaxActivationDistance * Options.GA_AutoInteract_Range.Value then
                    fireproximityprompt(Loot.FuseObtain.ModulePrompt)
                end
            end

        elseif Loot.Name == "Knockbomb" or Loot.Name == "Bomb" or Loot.Name == "BigBomb" or Loot.Name == "Smoothie" or Loot.Name == "StarJug" or Loot.Name == "Lockpick" or Loot.Name == "StarVial" or Loot.Name == "SkeletonKey" or Loot.Name == "Crucifix" or Loot.Name == "CrucifixWall" or Loot.Name == "Flashlight" or Loot.Name == "Candle" or Loot.Name == "Straplight" or Loot.Name == "Vitamins" or Loot.Name == "Lighter" or Loot.Name == "Shears" or Loot.Name == "BatteryPack" or Loot.Name == "BandagePack" or Loot.Name == "LaserPointer" or Loot.Name == "Bulklight" then
            local SameTool = HasItem(Loot:GetAttribute("Pickup"))

            if table.find(LightSources, Loot.Name) and Options.GA_AutoInteract_Options.Value["Ignore Light Sources"] then
                continue
            end

           if (Loot.Main.Position - LocalPlayer.Character.Collision.Position).Magnitude < Loot.ModulePrompt.MaxActivationDistance * Options.GA_AutoInteract_Range.Value then
                fireproximityprompt(Loot.ModulePrompt)
            end

        elseif Loot.Name == "Candy" then

            if Options.GA_AutoInteract_Options.Value["Ignore Can-Die"] then
				if Loot:FindFirstChild("Meshes/DOORS_EvilCandy_Cube", true) then continue end
			end

            if (Loot.Main.Position - LocalPlayer.Character.Collision.Position).Magnitude < Loot.ModulePrompt.MaxActivationDistance * Options.GA_AutoInteract_Range.Value then
                fireproximityprompt(Loot.ModulePrompt)
            end

        elseif Loot.Name == "KeyObtain" then

            if not (HasItem("Key") or HasItem("KeyBackdoor")) then
                if (Loot.Hitbox.Position - LocalPlayer.Character.Collision.Position).Magnitude < Loot.ModulePrompt.MaxActivationDistance * Options.GA_AutoInteract_Range.Value then
                    fireproximityprompt(Loot.ModulePrompt)
                end
            end

        elseif Loot.Name == "Battery" then
            local ToolHasNeedsBattery

            for _, Tool in LocalPlayer.Backpack:GetChildren() do
                if Tool:GetAttribute("RechargeProp") == "Battery" and Tool:GetAttribute("Durability") < Tool:GetAttribute("DurabilityMax") then
                    ToolHasNeedsBattery = Tool

                    break
                end
            end

            if not ToolHasNeedsBattery then
                local Tool = LocalPlayer.Character:FindFirstChildWhichIsA("Tool")

                if Tool and Tool:GetAttribute("RechargeProp") == "Battery" and Tool:GetAttribute("Durability") < Tool:GetAttribute("DurabilityMax") then
                    ToolHasNeedsBattery = Tool
                end
            end

            if (BatteryPack and BatteryPack:GetAttribute("Durability") < BatteryPack:GetAttribute("DurabilityMax")) or ToolHasNeedsBattery then
                if (Loot.Main.Position - LocalPlayer.Character.Collision.Position).Magnitude < Loot.ModulePrompt.MaxActivationDistance * Options.GA_AutoInteract_Range.Value then

                    if ToolHasNeedsBattery and ToolHasNeedsBattery.Parent ~= LocalPlayer.Character then
                        ToolHasNeedsBattery.Parent = LocalPlayer.Character
                    end

                    fireproximityprompt(Loot.ModulePrompt)
                end
            end

        end
    end
end

function Esp(Parent, TextAdornee, Text, Color, OutlineColor, Type)
    local BillboardGui = Instance.new("BillboardGui", Parent)
    local TextLabel = Instance.new("TextLabel", BillboardGui)
    local Highlight = Instance.new("Highlight", Parent)

    BillboardGui.Adornee = TextAdornee
    BillboardGui.AlwaysOnTop = true
    BillboardGui.Name = "_LOLHAXBG"
    BillboardGui.Size = UDim2.fromScale(1, 1)
    BillboardGui.Enabled = true

    Highlight.Name = "_LOLHAXHL"

    TextLabel.Size = UDim2.fromScale(1, 1)
    TextLabel.TextStrokeTransparency = 0
    TextLabel.Font = Enum.Font[Options.ESPS_Font.Value]
    TextLabel.TextSize = Options.ESPS_FontSize.Value
    TextLabel.TextColor3 = Color
    TextLabel.BackgroundTransparency = 1

    Highlight.Adornee = Parent

    Highlight.FillColor = Color
    Highlight.OutlineColor = (OutlineColor and typeof(OutlineColor) == "Color3") and OutlineColor or Color

    TextLabel.TextTransparency = 1
    Highlight.FillTransparency = 1
    Highlight.OutlineTransparency = 1

    TextLabel:SetAttribute("Text", Text)

    Type = Type or OutlineColor -- WEIRD AS SHIT trust the process tho
    if not Type then
		error("TYPE DOESNT FUCKING EXISTTTTT OH MY FUCKING GOD YOU DUMB FUCKKK HOLY SHIT :)")
	end

    if Type == "Entities" then
        game:GetService("TweenService"):Create( Highlight, TweenInfo.new( Options.ESPS_FadeTime.Value ), { FillTransparency = (Toggles.ESPE_Enabled.Value and Toggles.ESPE_Fill.Value) and Options.ESPS_FillTransparency.Value or 1 } ):Play()
        game:GetService("TweenService"):Create( Highlight, TweenInfo.new( Options.ESPS_FadeTime.Value ), { OutlineTransparency = (Toggles.ESPE_Enabled.Value and Toggles.ESPE_Outline.Value) and Options.ESPS_OutlineTransparency.Value or 1 } ):Play()
        game:GetService("TweenService"):Create( TextLabel, TweenInfo.new( Options.ESPS_FadeTime.Value ), { TextTransparency = 0 } ):Play()
    elseif Type == "Players" then
        game:GetService("TweenService"):Create( Highlight, TweenInfo.new( Options.ESPS_FadeTime.Value ), { FillTransparency = (Toggles.ESPP_Enabled.Value and Toggles.ESPP_Fill.Value) and Options.ESPS_FillTransparency.Value or 1 } ):Play()
        game:GetService("TweenService"):Create( Highlight, TweenInfo.new( Options.ESPS_FadeTime.Value ), { OutlineTransparency = (Toggles.ESPP_Enabled.Value and Toggles.ESPP_Outline.Value) and Options.ESPS_OutlineTransparency.Value or 1 } ):Play()
        game:GetService("TweenService"):Create( TextLabel, TweenInfo.new( Options.ESPS_FadeTime.Value ), { TextTransparency = 0 } ):Play()
    else
        game:GetService("TweenService"):Create( Highlight, TweenInfo.new( Options.ESPS_FadeTime.Value ), { FillTransparency = (Toggles.ESPI_M_Enabled.Value and Toggles.ESPI_M_Fill.Value and Toggles["ESPI_C_" .. Type].Value) and Options.ESPS_FillTransparency.Value or 1 } ):Play()
        game:GetService("TweenService"):Create( Highlight, TweenInfo.new( Options.ESPS_FadeTime.Value ), { OutlineTransparency = (Toggles.ESPI_M_Enabled.Value and Toggles.ESPI_M_Outline.Value and Toggles["ESPI_C_" .. Type].Value) and Options.ESPS_OutlineTransparency.Value or 1 } ):Play()
        game:GetService("TweenService"):Create( TextLabel, TweenInfo.new( Options.ESPS_FadeTime.Value ), { TextTransparency = 0 } ):Play()
    end

    return Highlight, TextLabel
end

function EspUpdate() -- Hahaha hey :3
    for Name, Table in EspTable.Interactables do
        for _, v in Table do
            local VarName = "ESPI_C_" .. Name

            local Highlight = v[1]
            local TextLabel = v[2]

            Highlight.FillTransparency = Toggles.ESPI_M_Fill.Value and Options.ESPS_FillTransparency.Value or 1
            Highlight.FillColor = Options[VarName .. "_F"].Value

            Highlight.OutlineTransparency = Toggles.ESPI_M_Outline.Value and Options.ESPS_OutlineTransparency.Value or 1
            Highlight.OutlineColor = Options[VarName .. "_O"].Value

            TextLabel.TextColor3 = Options[VarName .. "_F"].Value
            TextLabel.Font = Enum.Font[Options.ESPS_Font.Value]
            TextLabel.TextSize = Options.ESPS_FontSize.Value

            Highlight.Enabled = Toggles.ESPI_M_Enabled.Value and Toggles[VarName].Value
        end
    end

    for _, v in EspTable.Entities do
        local Highlight = v[1]
        local TextLabel = v[2]

        Highlight.FillTransparency = Toggles.ESPE_Fill.Value and Options.ESPS_FillTransparency.Value or 1
        Highlight.OutlineTransparency = Toggles.ESPE_Outline.Value and Options.ESPS_OutlineTransparency.Value or 1

        TextLabel.Font = Enum.Font[Options.ESPS_Font.Value]
        TextLabel.TextSize = Options.ESPS_FontSize.Value

        Highlight.Enabled = Toggles.ESPE_Enabled.Value
    end

    for _, v in EspTable.Players do
        local Highlight = v[1]
        local TextLabel = v[2]

        Highlight.FillTransparency = Toggles.ESPP_Fill.Value and Options.ESPS_FillTransparency.Value or 1
        Highlight.FillColor = Options.ESPP_Color_F.Value

        Highlight.OutlineTransparency = Toggles.ESPP_Outline.Value and Options.ESPS_OutlineTransparency.Value or 1
        Highlight.OutlineColor = Options.ESPP_Color_O.Value

        TextLabel.TextColor3 = Options.ESPP_Color_F.Value
        TextLabel.Font = Enum.Font[Options.ESPS_Font.Value]
        TextLabel.TextSize = Options.ESPS_FontSize.Value

        Highlight.Enabled = Toggles.ESPP_Enabled.Value
    end
end

function RemoveEspSmooth(Parent)
    for _, x in Parent:GetChildren() do
        if x.Name == "_LOLHAXBG" then
            game:GetService("TweenService"):Create( x.TextLabel, TweenInfo.new(1), { TextTransparency = 1 } ):Play()

            task.delay(Options.ESPS_FadeTime.Value, function()
                x:Destroy()
            end)
        elseif x.Name == "_LOLHAXHL" then
            game:GetService("TweenService"):Create( x, TweenInfo.new( Options.ESPS_FadeTime.Value ), { FillTransparency = 1 } ):Play()
            game:GetService("TweenService"):Create( x, TweenInfo.new( Options.ESPS_FadeTime.Value ), { OutlineTransparency = 1 } ):Play()

            task.delay(Options.ESPS_FadeTime.Value, function()
                x:Destroy()
            end)
        end
    end
end

function SolveAnchor(Code, Offset)
    local Result = ""

    local NumberTable = {}
    table.insert(NumberTable, 1, string.sub(tostring(Code), 1, 1))
    table.insert(NumberTable, 2, string.sub(tostring(Code), 2, 2))
    table.insert(NumberTable, 3, string.sub(tostring(Code), 3, 3))

    for i, Number in NumberTable do
        Number += Offset

        if Number > 9 then
            Number -= 10
        elseif Number < 0 then
            Number += 10
        end

        NumberTable[i] = Number
    end

    for _, Number in NumberTable do
        Result = Result..Number
    end

    return Result
end

-- Code vvv

task.spawn(function()
    while task.wait() and not Library.Unloaded do

		for Name, Table in EspTable.Interactables do
			for _, v in Table do
                local TextLabel = v[2]
                local String = ""

                if Toggles.ESPI_M_Name.Value then
                    String = TextLabel:GetAttribute("Text")
                end

                if Toggles.ESPI_M_Distance.Value then
                    local Distance = (workspace.CurrentCamera.CFrame.Position - v[1].Adornee:GetPivot().Position).Magnitude

                    String = String .. "\n[ " .. string.format(Distance <= 9.9 and "%.1f" or "%.0f", Distance) .. " ]"
                end

                -- 😭😭😭 wtf
                TextLabel.Visible = Toggles.ESPI_M_Enabled.Value and Toggles["ESPI_C_" .. Name].Value
                TextLabel.Text = String
            end
		end

        for _, v in EspTable.Entities do
            local TextLabel = v[2]
            local String = ""

            if Toggles.ESPE_Name.Value then
                String = TextLabel:GetAttribute("Text")
            end

			if Toggles.ESPE_Distance.Value then
                local Distance = (workspace.CurrentCamera.CFrame.Position - v[1].Adornee:GetPivot().Position).Magnitude

                String = String .. "\n[ " .. string.format(Distance <= 9.9 and "%.1f" or "%.0f", Distance) .. " ]"
            end

            -- 😭😭😭 wtf
            TextLabel.Visible = Toggles.ESPE_Enabled.Value
            TextLabel.Text = String
		end

        for _, v in EspTable.Players do
            local TextLabel = v[2]
            local String = ""

            if Toggles.ESPP_Name.Value then
                String = TextLabel:GetAttribute("Text")
            end

			if Toggles.ESPP_Distance.Value then
                local Distance = (workspace.CurrentCamera.CFrame.Position - v[1].Adornee:GetPivot().Position).Magnitude

                String = String .. "\n[ " .. string.format(Distance <= 9.9 and "%.1f" or "%.0f", Distance) .. " ]"
            end

            -- 😭😭😭 wtf
            TextLabel.Visible = Toggles.ESPP_Enabled.Value
            TextLabel.Text = String
		end

	end
end)

local CameraAdded = workspace.CurrentCamera.ChildAdded:Connect(function(v)

    if v.Name == "Screech" then
        if Toggles.GN_Entities.Value and Options.GN_Entities_Options.Value["Screech"] then
            Notify("Entity 'Screech' has spawned!", "Look around and look at it quickly!")
        end
    elseif v.Name == "LiveSanity" then
        task.delay(0.2, function()

            if workspace:FindFirstChild("EntityModel") then
                v.Enabled = not Toggles.VR_NoHasteEffect.Value
            end

        end)
    end

end)

local Connections = {
    game:GetService("RunService").Heartbeat:Connect(function(DeltaTime)

		if Toggles.MM_Fly.Value and Options.MM_Fly_K:GetState() then
            local Velocity = Vector3.zero

            if game:GetService("UserInputService"):IsKeyDown("Space") then
                Velocity += Vector3.yAxis
            elseif game:GetService("UserInputService"):IsKeyDown("LeftControl") then
                Velocity -= Vector3.yAxis
            end

            LocalPlayer.Character.HumanoidRootPart.AssemblyLinearVelocity = ((LocalPlayer.Character.Humanoid.MoveDirection + Velocity) * Options.MM_Fly_S.Value) + Vector3.yAxis * DeltaTime * 70 -- 💔
        end

    end),

    game:GetService("RunService").RenderStepped:Connect(function()
        if not (LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and LocalPlayer.Character:FindFirstChild("Collision")) then return end

        if Toggles.EB_ACManipulate.Value and Options.EB_ACManipulate_K:GetState() then
            LocalPlayer.Character:PivotTo(LocalPlayer.Character:GetPivot() + workspace.CurrentCamera.CFrame.LookVector * Vector3.new(1, 0, 1) * -100)
        end

        if Main_Game then
            if Options.VV_FieldOfView.Value ~= 0 then
                Main_Game.fovtarget = Options.VV_FieldOfView.Value
            end

            if Toggles.VV_NoCamShake.Value then
                Main_Game.csgo = CFrame.new()
            end

            if Toggles.VV_Thirdperson.Value and Options.VV_Thirdperson_K:GetState() then
                Main_Game.tooloffset = Vector3.new(0, -(1 / 3), 0)
            elseif Toggles.VV_ViewmodelOffset.Value then
                Main_Game.tooloffset = Vector3.new(Options.VV_ViewmodelOffset_X.Value, Options.VV_ViewmodelOffset_Y.Value, Options.VV_ViewmodelOffset_Z.Value)
            else
                local Tool = LocalPlayer.Character:FindFirstChildWhichIsA("Tool")

                if Tool then
                    if Tool:GetAttribute("ToolOffset") then
                        if Main_Game.tooloffset ~= Tool:GetAttribute("ToolOffset") then
                            Main_Game.tooloffset = Tool:GetAttribute("ToolOffset")
                        end
                    else
                        Main_Game.tooloffset = Vector3.zero
                    end
                end
            end
        end

        if game.ReplicatedStorage.GameData.Floor.Value == "Party" and Toggles.GA_AutoPowerup.Value then
            for _, Room in Rooms:GetChildren() do
				
                if Room:FindFirstChild("ItemPads") then
					for _, Powerup in Room.ItemPads:GetChildren() do

                        if Powerup:FindFirstChild("Hitbox") and Powerup.Hitbox:FindFirstChild("TouchInterest") then
							firetouchinterest(LocalPlayer.Character.HumanoidRootPart, Powerup.Hitbox, 1 and 0)
						end

					end
				end

			end
		end


        if not LocalPlayer.Character:GetAttribute("Hiding") then
            if workspace:FindFirstChild("Eyes") and Toggles.ES_AntiEyes.Value then
                for _, v in workspace:GetChildren() do
                    if v.Name == "Eyes" and v:FindFirstChild("Core") and v.Core:FindFirstChild("Ambience") and v.Core.Ambience.Playing then
                        game.ReplicatedStorage.RemotesFolder.MotorReplication:FireServer(-650)
                        break
                    end
                end
            end
            if workspace:FindFirstChild("BackdoorLookman") and Toggles.ES_AntiLookman.Value then
                for _, v in workspace:GetChildren() do
                    if v.Name == "BackdoorLookman" and v:FindFirstChild("Core") and v.Core:FindFirstChild("Ambience") and v.Core.Ambience.Playing then
                        game.ReplicatedStorage.RemotesFolder.MotorReplication:FireServer(-650)
                        break
                    end
                end
            end
        end


        if Toggles.GA_AutoInteract.Value and Options.GA_AutoInteract_K:GetState() then
            local CurrentRoom = Rooms[ LocalPlayer:GetAttribute("CurrentRoom") ]

            local Targets = {}

            for _, v in CurrentRoom:GetChildren() do

                if v:IsA("Folder") then
                	if v.Name == "Assets" then

                        table.insert(Targets, v)

                        if v:FindFirstChild("Blockage") then
                            table.insert(Targets, v.Blockage)
                        end
                        if v:FindFirstChild("Blockade") then
                            table.insert(Targets, v.Blockade)
                        end
                        if v:FindFirstChild("Checkout Desk") then
                            table.insert(Targets, v["Checkout Desk"])
                        end
                        if v:FindFirstChild("Bookshelves1") then
                            table.insert(Targets, v.Bookshelves1)
                        end
                        if v:FindFirstChild("Tables1") then
                            table.insert(Targets, v.Tables1)
                        end
                        if v:FindFirstChild("ClockSpawn") then
                            table.insert(Targets, v.ClockSpawn)
                        end
                        if v:FindFirstChild("Decor") and v.Decor:FindFirstChild("Folder") then
                            table.insert(Targets, v.Decor.Folder)
                        end

                        for _, Assets in v:GetChildren() do
                            if Assets.Name == "Alternate" and Assets:FindFirstChild("Keys") then

                                for _, Root in Assets.Keys:GetChildren() do
                                    if Root:FindFirstChild("KeyObtain") then

                                        if not (HasItem("Key") or HasItem("KeyBackdoor")) then
                                            if (Root.KeyObtain.Hitbox.Position - LocalPlayer.Character.Collision.Position).Magnitude < Root.KeyObtain.ModulePrompt.MaxActivationDistance * Options.GA_AutoInteract_Range.Value then
                                                fireproximityprompt(Root.KeyObtain.ModulePrompt)
                                            end
                                        end

                                    end
                                end

                            elseif Assets.Name == "StandardDecor" and v:IsA("Folder") then

                                table.insert(Targets, Assets)

                            end
                        end

                    elseif v.Name == "Parts" then

                        for _, Parts in v:GetChildren() do
                            if Parts.Name == "VentGrate" and Parts:FindFirstChild("AwesomePrompt") and Parts.AwesomePrompt.Enabled then

                                if (Parts.SquareGrate.Position - LocalPlayer.Character.Collision.Position).Magnitude < Parts.AwesomePrompt.MaxActivationDistance * Options.GA_AutoInteract_Range.Value then
                                    fireproximityprompt(Parts.AwesomePrompt)
                                end

                            end
                        end
						
					end

                elseif v:IsA("Model") then

                    if (v.Name == "Sideroom" or v.Name == "HotelSideroom" or string.find(v.Name, "Mines_Sideroom") or string.find(v.Name, "Sewer_Sideroom")) and v:FindFirstChild("Assets") then 

                        table.insert(Targets, v.Assets)

                    elseif v.Name == "Door" and v:FindFirstChild("Lock") then -- God this is so ugly and out of place..

                        local Item = (Options.GA_AutoInteract_Options.Value["Use Lockpick ( Doors )"] and HasItem("Lockpick")) or HasItem("Key") or LocalPlayer.Character:FindFirstChild("KeyBackdoor")

                        if Item then
                            if (v.Lock.Position - LocalPlayer.Character.Collision.Position).Magnitude < v.Lock.UnlockPrompt.MaxActivationDistance * Options.GA_AutoInteract_Range.Value then
                                fireproximityprompt(v.Lock.UnlockPrompt)
                            end
                        end

                    elseif v.Name == "AlarmClock" then

                        if (v.Main.Position - LocalPlayer.Character.Collision.Position).Magnitude < v.ModulePrompt.MaxActivationDistance * Options.GA_AutoInteract_Range.Value then
                            fireproximityprompt(v.ModulePrompt)
                        end

                    elseif v.Name == "LibraryHintPaper" and not HasItem("LibraryHintPaper") then

                        if (v.Handle.Position - LocalPlayer.Character.Collision.Position).Magnitude < v.ModulePrompt.MaxActivationDistance * Options.GA_AutoInteract_Range.Value then
                            fireproximityprompt(v.ModulePrompt)
                        end

                    elseif v.Name == "LiveBreakerPolePickup" then

                        local Prompt
                        for _, ActivateEventPrompt in v:GetChildren() do

                            if ActivateEventPrompt:IsA("ProximityPrompt") and ActivateEventPrompt.RequiresLineOfSight then
                                Prompt = ActivateEventPrompt
                            end

                        end

                        if (v.Base.Position - LocalPlayer.Character.Collision.Position).Magnitude < Prompt.MaxActivationDistance * Options.GA_AutoInteract_Range.Value then
                            fireproximityprompt(Prompt)
                        end

                    elseif v.Name == "Wax_Door" and LocalPlayer.Character:FindFirstChild("SkeletonKey") then
                  
                    	if v.SkullLock.SkullPrompt.Enabled and (v.SkullLock.Position - LocalPlayer.Character.Collision.Position).Magnitude < v.SkullLock.SkullPrompt.MaxActivationDistance * Options.GA_AutoInteract_Range.Value then
                            fireproximityprompt(v.SkullLock.SkullPrompt)
                        end

                    elseif v.Name == "Green_Herb" and not LocalPlayer.Character:GetAttribute("HerbGreenEffect") then
                  
                    	if (v.Plant.Position - LocalPlayer.Character.Collision.Position).Magnitude < v.Plant.HerbPrompt.MaxActivationDistance * Options.GA_AutoInteract_Range.Value then
                            fireproximityprompt(v.Plant.HerbPrompt)
                        end

                    end

                end
            end

            for _, Assets in Targets do
                for _, Root in Assets:GetChildren() do
					if Root.Name == "SewerRingBreakable" then

                        if Root:FindFirstChild("DoorPart") and Root.DoorPart.Anchored then

                            if (Root.DoorPart.Position - LocalPlayer.Character.Collision.Position).Magnitude < Root.DoorPart.LongPushPrompt.MaxActivationDistance * Options.GA_AutoInteract_Range.Value then
                                fireproximityprompt(Root.DoorPart.LongPushPrompt)
                            end

                        end

                    elseif Root.Name == "Locker_Small" then

                        if Root.Door.ActivateEventPrompt:GetAttribute("Interactions") then

                            FindLoot(Root)

                        else
                            if (Root.Door.Position - LocalPlayer.Character.Collision.Position).Magnitude < Root.Door.ActivateEventPrompt.MaxActivationDistance * Options.GA_AutoInteract_Range.Value then
                                fireproximityprompt(Root.Door.ActivateEventPrompt)
                            end
                        end

                    elseif Root.Name == "Locker_Small_Locked" then

                        if Root.Door.ActivateEventPrompt.ActionText ~= "Loot" then

                            FindLoot(Root)

                        else
							local Lockpick = Options.GA_AutoInteract_Options.Value["Use Lockpick ( Other )"] and HasItem("Lockpick")

                            if Lockpick and (Root.Door.Position - LocalPlayer.Character.Collision.Position).Magnitude < Root.Door.ActivateEventPrompt.MaxActivationDistance * Options.GA_AutoInteract_Range.Value then
                                Lockpick.Parent = LocalPlayer.Character

                                fireproximityprompt(Root.Door.ActivateEventPrompt)
							end
                        end

                    elseif Root.Name == "Toolbox" or Root.Name == "ChestBox" or Root.Name == "Toolshed_Small" then

                        if Root.ActivateEventPrompt:GetAttribute("Interactions") then

                            FindLoot(Root)

                        else
                            if (Root.Main.Position - LocalPlayer.Character.Collision.Position).Magnitude < Root.ActivateEventPrompt.MaxActivationDistance * Options.GA_AutoInteract_Range.Value then
                                fireproximityprompt(Root.ActivateEventPrompt)
                            end
                        end

                    elseif Root.Name == "Toolbox_Locked" then

                        if Root.ActivateEventPrompt.ActionText ~= "Loot" then

                            FindLoot(Root)

                        else
							local Lockpick = Options.GA_AutoInteract_Options.Value["Use Lockpick ( Other )"] and HasItem("Lockpick")

                            if Lockpick and (Root.Main.Position - LocalPlayer.Character.Collision.Position).Magnitude < Root.ActivateEventPrompt.MaxActivationDistance * Options.GA_AutoInteract_Range.Value then
                                Lockpick.Parent = LocalPlayer.Character

                                fireproximityprompt(Root.ActivateEventPrompt)
                            end
                        end

                    elseif Root.Name == "Chest_Vine" then

                        if Root:FindFirstChild("LootHolder") then

                            FindLoot(Root)

                        end

                    elseif Root.Name == "ChestBoxLocked" then

                        if Root.ActivateEventPrompt:GetAttribute("Interactions") then

                            FindLoot(Root)

                        else
                            if Options.GA_AutoInteract_Options.Value["Use Lockpick ( Other )"] and LocalPlayer.Character:FindFirstChild("Lockpick") and (Root.Main.Position - LocalPlayer.Character.Collision.Position).Magnitude < Root.ActivateEventPrompt.MaxActivationDistance * Options.GA_AutoInteract_Range.Value then
                                fireproximityprompt(Root.ActivateEventPrompt)
                            end
                        end

                    elseif Root.Name == "OldWoodenTable" then

                        FindLoot(Root)

                        for _, v in Root:GetChildren() do
                            if v.Name == "DrawerContainer" then
                                if v.Metal.ActivateEventPrompt:GetAttribute("Interactions") then

                                    FindLoot(v)

                                else
                                    if (Root.Metal.Position - LocalPlayer.Character.Collision.Position).Magnitude < v.Metal.ActivateEventPrompt.MaxActivationDistance * Options.GA_AutoInteract_Range.Value then
                                        fireproximityprompt(v.Metal.ActivateEventPrompt)
                                    end
                                end
                            end
                        end

                    elseif Root.Name == "Dresser_Single" or Root.Name == "Dresser" or Root.Name == "Table" or Root.Name == "Library_Desk" or Root.Name == "DiningTable_TableclothLoot" then

                        FindLoot(Root)

                        for _, v in Root:GetChildren() do
                            if v.Name == "DrawerContainer" then
                                if v.Knobs.ActivateEventPrompt:GetAttribute("Interactions") then

                                    FindLoot(v)

                                else
                                    if (v.Knobs.Position - LocalPlayer.Character.Collision.Position).Magnitude < v.Knobs.ActivateEventPrompt.MaxActivationDistance * Options.GA_AutoInteract_Range.Value then
                                        fireproximityprompt(v.Knobs.ActivateEventPrompt)
                                    end
                                end
                            end
                        end

                    elseif Root.Name == "Backdoor_Table" then

                        FindLoot(Root)

                        for _, v in Root:GetChildren() do
                            if v.Name == "DrawerContainer" then
                                if v.Knob.ActivateEventPrompt:GetAttribute("Interactions") then

                                    FindLoot(v)

                                else
                                    if (v.Knob.Position - LocalPlayer.Character.Collision.Position).Magnitude < v.Knob.ActivateEventPrompt.MaxActivationDistance * Options.GA_AutoInteract_Range.Value then
                                        fireproximityprompt(v.Knob.ActivateEventPrompt)
                                    end
                                end
                            end
                        end

                    elseif Root.Name == "Rolltop_Desk" then

                        FindLoot(Root)

                        for _, v in Root:GetChildren() do
                            if v.Name == "DrawerContainer" then

                                if v.Knobs.ActivateEventPrompt:GetAttribute("Interactions") then

                                    FindLoot(v)

                                else
                                    if (v.Knobs.Position - LocalPlayer.Character.Collision.Position).Magnitude < v.Knobs.ActivateEventPrompt.MaxActivationDistance * Options.GA_AutoInteract_Range.Value then
                                        fireproximityprompt(v.Knobs.ActivateEventPrompt)
                                    end
                                end

                            elseif v.Name == "RolltopContainer" then

                                if v.ActivateEventPrompt:GetAttribute("Interactions") then

                                    FindLoot(v)

                                else
                                    if (v.Main.Position - LocalPlayer.Character.Collision.Position).Magnitude < v.ActivateEventPrompt.MaxActivationDistance * Options.GA_AutoInteract_Range.Value then
                                        fireproximityprompt(v.ActivateEventPrompt)
                                    end
                                end

                            end
                        end

                    elseif Root.Name == "KeyObtain" or Root.Name == "ElectricalKeyObtain" then

                        if not (HasItem("Key") or HasItem("KeyBackdoor") or HasItem("KeyElectrical")) then
                            if (Root.Hitbox.Position - LocalPlayer.Character.Collision.Position).Magnitude < Root.ModulePrompt.MaxActivationDistance * Options.GA_AutoInteract_Range.Value then
                                fireproximityprompt(Root.ModulePrompt)
                            end
                        end

                    elseif Root.Name == "MinesGenerator" then
                        local Fuse = HasItem("GeneratorFuse")

                        for _, FuseInput in Root.Fuses:GetChildren() do
                            if FuseInput:FindFirstChild("FusesPrompt") then
                                if Fuse and (FuseInput.Fuse.Position - LocalPlayer.Character.Collision.Position).Magnitude < FuseInput.FusesPrompt.MaxActivationDistance * Options.GA_AutoInteract_Range.Value then
                                    fireproximityprompt(FuseInput.FusesPrompt)
                                end

                                break
                            end
                        end

                        if Root.Lever.LeverPrompt.Enabled and (Root.Lever.Position - LocalPlayer.Character.Collision.Position).Magnitude < Root.Lever.LeverPrompt.MaxActivationDistance * Options.GA_AutoInteract_Range.Value then
                            fireproximityprompt(Root.Lever.LeverPrompt)
                        end
                    
                    elseif Root.Name == "MinesGateButton" then

                        if Root.Light.Transparency < 1 then
                            if (Root.Button.Position - LocalPlayer.Character.Collision.Position).Magnitude < Root.Button.ActivateEventPrompt.MaxActivationDistance * Options.GA_AutoInteract_Range.Value then
                                fireproximityprompt(Root.Button.ActivateEventPrompt)
                            end
                        end

                    elseif Root.Name == "LeverForGate" then

                        if not Root.ActivateEventPrompt:GetAttribute("Interactions") then
                            if (Root.Main.Position - LocalPlayer.Character.Collision.Position).Magnitude < Root.ActivateEventPrompt.MaxActivationDistance * Options.GA_AutoInteract_Range.Value then
                                fireproximityprompt(Root.ActivateEventPrompt)
                            end
                        end

                    elseif Root.Name == "VentGrate" then

                        if Root.AwesomePrompt.Enabled then
                            if (Root.SquareGrate.Position - LocalPlayer.Character.Collision.Position).Magnitude < Root.AwesomePrompt.MaxActivationDistance * Options.GA_AutoInteract_Range.Value then
                                fireproximityprompt(Root.AwesomePrompt)
                            end
                        end

                    elseif Root.Name == "Modular_Bookshelf" and Root:FindFirstChild("LiveHintBook") then

                        if (Root.LiveHintBook.Base.Position - LocalPlayer.Character.Collision.Position).Magnitude < Root.LiveHintBook.ActivateEventPrompt.MaxActivationDistance * Options.GA_AutoInteract_Range.Value then
                            fireproximityprompt(Root.LiveHintBook.ActivateEventPrompt)
                        end

                    elseif Root.Name == "TimerLever" and not Root.ActivateEventPrompt:GetAttribute("Interactions") then

                        if (Root.Hitbox.Position - LocalPlayer.Character.Collision.Position).Magnitude < Root.ActivateEventPrompt.MaxActivationDistance * Options.GA_AutoInteract_Range.Value then
                            fireproximityprompt(Root.ActivateEventPrompt)
                        end

                    elseif Root.Name == "RoomsLootItem" or Root.Name == "CrucifixOnTheWall" or Root.Name == "SmoothieSpawner" then

                        FindLoot(Root)

                    end
                end
            end

            if CurrentRoom:FindFirstChild("_DamHandler") then

                for _, Flood in CurrentRoom._DamHandler:GetChildren() do
                    if Flood.Name:sub(1, 5) == "Flood" then

                        for _, WaterPump in Flood.Pumps:GetChildren() do
                            if WaterPump.Wheel.ValvePrompt.Enabled and (WaterPump.Wheel.Position - LocalPlayer.Character.Collision.Position).Magnitude < WaterPump.Wheel.ValvePrompt.MaxActivationDistance * Options.GA_AutoInteract_Range.Value then
                                fireproximityprompt(WaterPump.Wheel.ValvePrompt)
                            end
                        end

                    end
                end

            end

            if CurrentRoom:FindFirstChild("ElectricalDoor") then
                local ElectricalKey = HasItem("KeyElectrical")

                if CurrentRoom.ElectricalDoor.Door.Lock.UnlockPrompt.Enabled and ElectricalKey then
                    ElectricalKey.Parent = LocalPlayer.Character

                    if (CurrentRoom.ElectricalDoor.Door.Lock.Position - LocalPlayer.Character.Collision.Position).Magnitude < CurrentRoom.ElectricalDoor.Door.Lock.UnlockPrompt.MaxActivationDistance * Options.GA_AutoInteract_Range.Value then
                        fireproximityprompt(CurrentRoom.ElectricalDoor.Door.Lock.UnlockPrompt)
                    end

                end
            end

            if CurrentRoom:FindFirstChild("ElevatorBreakerEmpty") then

                if CurrentRoom.ElevatorBreakerEmpty.Prompt.Enabled then

                    if (CurrentRoom.ElevatorBreakerEmpty.Box.Position - LocalPlayer.Character.Collision.Position).Magnitude < CurrentRoom.ElevatorBreakerEmpty.Prompt.MaxActivationDistance * Options.GA_AutoInteract_Range.Value then
                        fireproximityprompt(CurrentRoom.ElevatorBreakerEmpty.Prompt)
                    end

                end
            end

            if CurrentRoom:FindFirstChild("RoomsDoor_Entrance") then
                local Lockpick = Options.GA_AutoInteract_Options.Value["Use Lockpick ( Other )"] and HasItem("Lockpick")
                local SkeletonKey = HasItem("SkeletonKey")

                if CurrentRoom.RoomsDoor_Entrance.Chain1.Lock1.ThingToEnable.Enabled and Lockpick then

                    if (CurrentRoom.RoomsDoor_Entrance.Chain1.Lock1.Position - LocalPlayer.Character.Collision.Position).Magnitude < CurrentRoom.RoomsDoor_Entrance.Chain1.Lock1.ThingToEnable.MaxActivationDistance * Options.GA_AutoInteract_Range.Value then
                        Lockpick.Parent = LocalPlayer.Character
                        fireproximityprompt(CurrentRoom.RoomsDoor_Entrance.Chain1.Lock1.ThingToEnable)
                    end

                elseif CurrentRoom.RoomsDoor_Entrance.Chain2.Lock2.LockPrompt.Enabled and Lockpick then

                    if (CurrentRoom.RoomsDoor_Entrance.Chain2.Lock2.Position - LocalPlayer.Character.Collision.Position).Magnitude < CurrentRoom.RoomsDoor_Entrance.Chain2.Lock2.LockPrompt.MaxActivationDistance * Options.GA_AutoInteract_Range.Value then
                        Lockpick.Parent = LocalPlayer.Character
                        fireproximityprompt(CurrentRoom.RoomsDoor_Entrance.Chain2.Lock2.LockPrompt)
                    end

                elseif CurrentRoom.RoomsDoor_Entrance.SkullLock.SkullPrompt.Enabled and SkeletonKey then

                    if (CurrentRoom.RoomsDoor_Entrance.SkullLock.Position - LocalPlayer.Character.Collision.Position).Magnitude < CurrentRoom.RoomsDoor_Entrance.SkullLock.SkullPrompt.MaxActivationDistance * Options.GA_AutoInteract_Range.Value then
                        SkeletonKey.Parent = LocalPlayer.Character
                        fireproximityprompt(CurrentRoom.RoomsDoor_Entrance.SkullLock.SkullPrompt)
                    end

                elseif CurrentRoom.RoomsDoor_Entrance.Door.EnterPrompt.Enabled then

                    if (CurrentRoom.RoomsDoor_Entrance.Door.Position - LocalPlayer.Character.Collision.Position).Magnitude < CurrentRoom.RoomsDoor_Entrance.Door.EnterPrompt.MaxActivationDistance * Options.GA_AutoInteract_Range.Value then
                        fireproximityprompt(CurrentRoom.RoomsDoor_Entrance.Door.EnterPrompt)
                    end

                end
            end

            local DoorExit = CurrentRoom:FindFirstChild("Backdoors_Exit") or CurrentRoom:FindFirstChild("RoomsDoor_Exit")
            if DoorExit then

                if (DoorExit.Door.Position - LocalPlayer.Character.Collision.Position).Magnitude < DoorExit.Door.EnterPrompt.MaxActivationDistance * Options.GA_AutoInteract_Range.Value then
                    fireproximityprompt(DoorExit.Door.EnterPrompt)
                end

            end

            FindLoot(workspace.Drops)
        end

        if PadlockCode and Toggles.GA_AutoPadlockSolve.Value and LocalPlayer:GetAttribute("CurrentRoom") <= 51 then
            local Padlock = workspace.CurrentRooms["50"].Door:FindFirstChild("Padlock")

            if Padlock then
                if (LocalPlayer.Character.Collision.Position - Padlock.Main.Position).Magnitude < Options.GA_AutoPadlockSolve_Distance.Value then
                    game.ReplicatedStorage.RemotesFolder.PL:FireServer(PadlockCode)
                end
            end
        end

        LocalPlayer.Character:SetAttribute("SpeedBoost", LocalPlayer.Character:GetAttribute("SpeedBoost") or 0)
        LocalPlayer.Character:SetAttribute("SpeedBoostBehind", LocalPlayer.Character:GetAttribute("SpeedBoost") or 0)
        LocalPlayer.Character:SetAttribute("SpeedBoostExtra", LocalPlayer.Character:GetAttribute("SpeedBoost") or 0)

        if Toggles.MM_Walkspeed.Value then
            LocalPlayer.Character.Humanoid.WalkSpeed = Options.MM_Walkspeed_S.Value + (LocalPlayer.Character:GetAttribute("Climbing") and Options.MM_Walkspeed_Boost.Value or 0) + LocalPlayer.Character:GetAttribute("SpeedBoost") + LocalPlayer.Character:GetAttribute("SpeedBoostBehind") + LocalPlayer.Character:GetAttribute("SpeedBoostExtra")
        end

        local Shade = not workspace.CurrentCamera:FindFirstChild("Shade")
        local Haste = not workspace.CurrentCamera:FindFirstChild("EntityModel")

        LocalPlayer.PlayerGui.MainUI.Jumpscare.Jumpscare_Shade.Visible = not (Toggles.VR_NoHaltEffect.Value or Shade)
        LocalPlayer.PlayerGui.MainUI.MainFrame.DreadVignette.Visible = not (Toggles.VR_NoHasteEffect.Value or Haste)
        LocalPlayer.Character.HumanoidRootPart.CustomPhysicalProperties = (Toggles.MM_NoAcceleration.Value and PhysicalProperties.new(100, 0.7, 0, 1, 1) or OldAccel)
    end),

    LocalPlayer:GetAttributeChangedSignal("CurrentRoom"):Connect(function()
        for _, Connection in ClosetConnections do
            Connection:Disconnect()
        end

        task.wait()

        for _, v in Rooms[LocalPlayer:GetAttribute("CurrentRoom")].Assets:GetChildren() do
            if v:IsA("Model") then

                if (v.Name == "Locker_Large" or v.Name == "Wardrobe" or v.Name == "Toolshed" or v.Name == "Bed" or v.Name == "Rooms_Locker" or v.Name == "Rooms_Locker_Fridge" or v.Name == "Backdoor_Wardrobe") and v:FindFirstChild("HiddenPlayer") then

                    HidingConnect(v, v.HiddenPlayer)

                elseif v.Name == "Double_Bed" then

                    for _, x in v:GetChildren() do
                        if x.Name == "DoubleBed" and x:FindFirstChild("HiddenPlayer") then

                            HidingConnect(v, x.HiddenPlayer)

                        end
                    end

                elseif v.Name == "Dumpster" then

                    for _, x in v:GetChildren() do
                        if x:FindFirstChild("HiddenPlayer") then

                            HidingConnect(v, x.HiddenPlayer)

                        end
                    end

                end

            elseif v:IsA("Folder") then

                if v.Name == "Blockage" then

                    for _, x in v:GetChildren() do
                        if x:IsA("Model") and x.Name == "Wardrobe" then

                            HidingConnect(x, x.HiddenPlayer)

                        end
                    end

                elseif v.Name == "Vents" then

                    for _, x in v:GetChildren() do
                        if x.Name == "CircularVent" and v:FindFirstChild("Grate") and v:FindFirstChild("HiddenPlayer") then

                            HidingConnect(x, v.HiddenPlayer)

                        end
                    end

                end

            end
        end

        for _, v in Rooms[LocalPlayer:GetAttribute("CurrentRoom")]:GetChildren() do
            if v:IsA("Model") then
                if v.Name == "CircularVent" and v:FindFirstChild("HiddenPlayer") then

                    HidingConnect(v, v.HiddenPlayer)

                end
            end
        end
    end),

    -- this is fucked.
    LocalPlayer.Character:GetAttributeChangedSignal("CanJump"):Connect(function()
        LocalPlayer.Character:SetAttribute("CanJump", Toggles.ES_AlwaysJump.Value or CanJump)     

        if not Toggles.ES_AlwaysJump.Value then
            CanJump = LocalPlayer.Character:GetAttribute("CanJump")
        end
    end),

    LocalPlayer.CharacterAdded:Connect(function(v)
        v:WaitForChild("Collision", 9e9)

        ClonedCollision = v.Collision:Clone()
        ClonedCollision.Parent = v

        ClonedCollision.Name = "_CollisionClone"
        ClonedCollision.Massless = true
        ClonedCollision.CanCollide = false
        ClonedCollision.CanQuery = false
        ClonedCollision.CustomPhysicalProperties = PhysicalProperties.new(0.01, 0.7, 0, 1, 1)
        ClonedCollision.CollisionCrouch:Destroy()
    end),

    LocalPlayer.PlayerGui.ChildAdded:Connect(function(v)
        Main_Game = nil
        task.wait(0.5)

        if v.Name == "MainUI" then
            v:WaitForChild("Initiator", 9e9):WaitForChild("Main_Game", 9e9):WaitForChild("RemoteListener", 9e9):WaitForChild("Modules", 9e9)
            v:WaitForChild("MainFrame", 9e9):WaitForChild("HideVignette", 9e9)
            v.Initiator.Main_Game:WaitForChild("Health", 9e9):WaitForChild("Jam", 9e9)
            v.Initiator.Main_Game:WaitForChild("PromptService", 9e9):WaitForChild("Triggered", 9e9)

            Main_Game = require(v.Initiator.Main_Game)

            A90Hook = hookfunction(require(v.Initiator.Main_Game.RemoteListener.Modules.A90), function(...)
                if Toggles.ER_NoA90.Value then
                    game.ReplicatedStorage.RemotesFolder.A90:FireServer("didnt")
                    return
                end

                return A90Hook(...)
            end)
            ScreechHook = hookfunction(require(v.Initiator.Main_Game.RemoteListener.Modules.Screech), function(...)
                if Toggles.ER_NoScreech.Value then
                    game.ReplicatedStorage.RemotesFolder.Screech:FireServer(true)
                    return
                end

                return ScreechHook(...)
            end)
            TimothyHook = hookfunction(require(v.Initiator.Main_Game.RemoteListener.Modules.SpiderJumpscare), function(...)
                if Toggles.VR_TimothyJumpscare.Value then
                    return
                end

                return TimothyHook(...)
            end)

            local Jammin = not game.ReplicatedStorage.LiveModifiers:FindFirstChild("Jammin")
            v.Initiator.Main_Game.Health.Jam.Playing = not (Toggles.MA_SilentJammin.Value or Jammin)
            v.MainFrame.HideVignette.Image = (Toggles.VR_NoHidingVignette.Value and "rbxassetid://0" or "rbxassetid://6100076320")
            v.Initiator.Main_Game.PromptService.Triggered.Volume = (Toggles.MA_SilentInteracting.Value and 0 or 0.04)

            task.wait(0.5)
            Main_Game.spring.Speed = (Toggles.VV_NoLookBob.Value and 9e9 or 8)
        end
    end),

    workspace.Terrain.ChildAdded:Connect(function(v)
        task.wait()

        if Toggles.MA_NoRandomAmbience.Value and v:IsA("Attachment") then
            v:Destroy()
        end
    end),

    Rooms.ChildAdded:Connect(function(v)
        repeat task.wait() until v:GetAttribute("RawName")

        if v:GetAttribute("RawName") == "HaltHallway" and Toggles.GN_Entities.Value and Options.GN_Entities_Options.Value["Halt"] then
            Notify("Entity 'Halt' spawns in the next room!", "...")
        end

        if game.ReplicatedStorage.GameData.Floor.Value == "Hotel" and v.Name == "100" then
			local BreakerAdded = v.ChildAdded:Connect(function(ElevatorBreaker)

                if ElevatorBreaker.Name == "ElevatorBreaker" then
                    local TextChanged = ElevatorBreaker.SurfaceGui.Frame.Code:GetPropertyChangedSignal("Text"):Connect(function()
                        task.wait()

                        if Toggles.GA_BreakerAutoSolve.Value then
                            local State = ElevatorBreaker.SurfaceGui.Frame.Code.Frame.BackgroundTransparency == 0

                            if ElevatorBreaker.SurfaceGui.Frame.Code.Text == "..." then

                                BreakerAlreadyDone = {}

                            elseif ElevatorBreaker.SurfaceGui.Frame.Code.Text == "??" then

                                for _, v in ElevatorBreaker:GetChildren() do
                                    if v.Name == "BreakerSwitch" and v:GetAttribute("ID") == MissingNumber(BreakerAlreadyDone, #BreakerAlreadyDone) then

                                        if State ~= v:GetAttribute("Enabled") then
                                            BreakerThing(v, State)
                                        end

                                        table.insert(BreakerAlreadyDone, MissingNumber(BreakerAlreadyDone, #BreakerAlreadyDone))
                                    
                                    end
                                end

                            else

                                for _, v in ElevatorBreaker:GetChildren() do
                                    if v.Name == "BreakerSwitch" and tonumber(ElevatorBreaker.SurfaceGui.Frame.Code.Text) and v:GetAttribute("ID") == tonumber(ElevatorBreaker.SurfaceGui.Frame.Code.Text) then

                                        if State ~= v:GetAttribute("Enabled") then
                                            BreakerThing(v, State)
                                        end

                                        table.insert(BreakerAlreadyDone, tonumber(ElevatorBreaker.SurfaceGui.Frame.Code.Text))

                                    end
                                end

                            end
                        end
                    end)

                    table.insert(Connections, ElevatorBreaker.Destroying:Once(function()
                        TextChanged:Disconnect()
                    end))
                end

            end)

            table.insert(Connections, BreakerAdded)
		end
    end),

    game.Lighting:GetPropertyChangedSignal("FogEnd"):Connect(function()
        if game.Lighting.FogEnd ~= 9999 then
            OldFogEnd = game.Lighting.FogEnd
        end

        if Toggles.VW_NoFog.Value then
            game.Lighting.FogEnd = 9999
        end
    end),

    -- heh.. 😼
    game.Lighting:GetPropertyChangedSignal("OutdoorAmbient"):Connect(function()
        if Toggles.VW_Ambience.Value then
            game.Lighting.OutdoorAmbient = Options.VW_Ambience_C.Value
        end
    end),

    Rooms.DescendantAdded:Connect(function(v)

        if v:IsA("Model") then
            if v.Name == "Door" then    

                v:WaitForChild("Door", 9e9)

                local RoomID = v:GetAttribute("RoomID")

                if RoomID then
                    local Adornee = v.Door

                    if game.ReplicatedStorage.GameData.Floor.Value == "Hotel" then
                        if RoomID >= 50 and RoomID <= 51 then
                        	Adornee = v
                        end
                    end

                    local Highlight, TextLabel = Esp(Adornee, Adornee, "Door", Options.ESPI_C_Doors_F.Value, Options.ESPI_C_Doors_O.Value, "Doors")

                    local Table = {Highlight, TextLabel}
                    table.insert(EspTable.Interactables.Doors, Table)

                    v.Destroying:Once(function()
                        table.remove(EspTable.Interactables.Doors, table.find(EspTable.Interactables.Doors, Table))
					end)

                    task.delay(1, function()
                        if v:GetAttribute("Opened") then
                            RemoveEspSmooth(Adornee)
                        else
                            v.AttributeChanged:Once(function()
                                RemoveEspSmooth(Adornee)
                            end)
                        end
                    end)
                end

            elseif v.Name == "FuseObtain" then

                v:WaitForChild("Hitbox", 9e9)

                local Highlight, TextLabel = Esp(v, v, "Generator Fuse", Options.ESPI_C_GeneratorFuses_F.Value, Options.ESPI_C_GeneratorFuses_O.Value, "GeneratorFuses")

                local Table = {Highlight, TextLabel}
                table.insert(EspTable.Interactables.GeneratorFuses, Table)

                v.Destroying:Once(function()
                    table.remove(EspTable.Interactables.GeneratorFuses, table.find(EspTable.Interactables.GeneratorFuses, Table))
                end)

                v.Hitbox.FuseModel.Changed:Once(function()
                    RemoveEspSmooth(v)
                end)

            elseif v.Name == "MinesGenerator" then

                v:WaitForChild("GeneratorMain", 9e9)
                v:WaitForChild("Lever", 9e9)

                local Highlight, TextLabel = Esp(v, v, "Generator", Options.ESPI_C_Generators_F.Value, Options.ESPI_C_Generators_O.Value, "Generators")

                local Table = {Highlight, TextLabel}
                table.insert(EspTable.Interactables.Generators, Table)

                v.Destroying:Once(function()
                    table.remove(EspTable.Interactables.Generators, table.find(EspTable.Interactables.Generators, Table))
                end)

                v.Lever.Sound.Played:Once(function()
                    RemoveEspSmooth(v)
                end)
            elseif v.Name == "KeyObtain" then

                v:WaitForChild("Hitbox", 9e9)

                task.delay(1, function()
                    local Highlight, TextLabel = Esp(v, v, "Door Key", Options.ESPI_C_DoorKeys_F.Value, Options.ESPI_C_DoorKeys_O.Value, "DoorKeys")

                    local Table = {Highlight, TextLabel}
                    table.insert(EspTable.Interactables.DoorKeys, Table)

                    v.Destroying:Once(function()
                        table.remove(EspTable.Interactables.DoorKeys, table.find(EspTable.Interactables.DoorKeys, Table))
                    end)
                end)

            elseif v.Name == "GoldPile" then
                v:WaitForChild("Hitbox", 9e9)

                local Highlight, TextLabel = Esp(v, v, "Gold Pile [ "..v:GetAttribute("GoldValue").." ]", Options.ESPI_C_GoldPiles_F.Value, Options.ESPI_C_GoldPiles_O.Value, "GoldPiles")

                local Table = {Highlight, TextLabel}
                table.insert(EspTable.Interactables.GoldPiles, Table)

                v.Destroying:Once(function()
                    table.remove(EspTable.Interactables.GoldPiles, table.find(EspTable.Interactables.GoldPiles, Table))
                end)

            elseif v.Name == "LeverForGate" then

                v:WaitForChild("Main", 9e9)

                local Highlight, TextLabel = Esp(v, v.Main, "Gate Lever", Options.ESPI_C_GateLevers_F.Value, Options.ESPI_C_GateLevers_O.Value, "GateLevers")

                local Table = {Highlight, TextLabel}
                table.insert(EspTable.Interactables.GateLevers, Table)

                v.Destroying:Once(function()
                    table.remove(EspTable.Interactables.GateLevers, table.find(EspTable.Interactables.GateLevers, Table))
                end)

                v:WaitForChild("ActivateEventPrompt", 9e9)

                v.ActivateEventPrompt.AttributeChanged:Once(function()
                    RemoveEspSmooth(v)
                end)

            elseif v.Name == "TimerLever" then

                task.delay(1, function()
                    if not v.Parent then return end

                    v:WaitForChild("Hitbox", 9e9)

                    local Highlight, TextLabel = Esp(v, v.Hitbox, "Timer Lever", Options.ESPI_C_BackroomsLevers_F.Value, Options.ESPI_C_BackroomsLevers_O.Value, "BackroomsLevers")

                    local Table = {Highlight, TextLabel}
                    table.insert(EspTable.Interactables.BackroomsLevers, Table)

                    v.Destroying:Once(function()
                        table.remove(EspTable.Interactables.BackroomsLevers, table.find(EspTable.Interactables.BackroomsLevers, Table))
                    end)

                    v:WaitForChild("ActivateEventPrompt", 9e9)

                    if v.ActivateEventPrompt:GetAttribute("Interactions") then
                        RemoveEspSmooth(v)
                    else
                        v.ActivateEventPrompt.AttributeChanged:Once(function()
                            RemoveEspSmooth(v)
                        end)
                    end
                end)

            elseif v.Name == "WaterPump" and v.Parent.Name == "Pumps" then

                v:WaitForChild("Wheel", 9e9):WaitForChild("ValvePrompt", 9e9)

                if v.Wheel.ValvePrompt then

                    local Highlight, TextLabel = Esp(v, v.Wheel, "Water Pump", Options.ESPI_C_WaterPumps_F.Value, Options.ESPI_C_WaterPumps_O.Value, "WaterPumps")

                    local Table = {Highlight, TextLabel}
                    table.insert(EspTable.Interactables.WaterPumps, Table)

                    v.Destroying:Once(function()
                        table.remove(EspTable.Interactables.WaterPumps, table.find(EspTable.Interactables.WaterPumps, Table))
                    end)

                    local WheelChanged; WheelChanged = v.Wheel.ValvePrompt:GetPropertyChangedSignal("Enabled"):Connect(function()
                        if v.Wheel.ValvePrompt.Enabled then return end

                        RemoveEspSmooth(v)
                        WheelChanged:Disconnect()
                    end)

                else

					v.Wheel.ValvePrompt:GetPropertyChangedSignal("Enabled"):Once(function()

                        local Highlight, TextLabel = Esp(v, v.Wheel, "Water Pump", Options.ESPI_C_WaterPumps_F.Value, Options.ESPI_C_WaterPumps_O.Value, "WaterPumps")

                        local Table = {Highlight, TextLabel}
                        table.insert(EspTable.Interactables.WaterPumps, Table)

                        v.Destroying:Once(function()
                            table.remove(EspTable.Interactables.WaterPumps, table.find(EspTable.Interactables.WaterPumps, Table))
                        end)

                        local WheelChanged; WheelChanged = v.Wheel.ValvePrompt:GetPropertyChangedSignal("Enabled"):Connect(function()
                            if v.Wheel.ValvePrompt.Enabled then return end

                            RemoveEspSmooth(v)
                            WheelChanged:Disconnect()
                        end)

                    end)

				end

            elseif v.Name == "LiveHintBook" then

                v:WaitForChild("Base", 9e9)

                local Highlight, TextLabel = Esp(v, v, "Book", Options.ESPI_C_LibraryBooks_F.Value, Options.ESPI_C_LibraryBooks_O.Value, "LibraryBooks")

                local Table = {Highlight, TextLabel}
                table.insert(EspTable.Interactables.LibraryBooks, Table)

                v.Destroying:Once(function()
                    table.remove(EspTable.Interactables.LibraryBooks, table.find(EspTable.Interactables.LibraryBooks, Table))
                end)

            elseif v.Name == "LiveBreakerPolePickup" then

                v:WaitForChild("Base", 9e9)

                local Highlight, TextLabel = Esp(v, v, "Breaker Pole", Options.ESPI_C_BreakerPoles_F.Value, Options.ESPI_C_BreakerPoles_O.Value, "BreakerPoles")

                local Table = {Highlight, TextLabel}
                table.insert(EspTable.Interactables.BreakerPoles, Table)

                v.Destroying:Once(function()
                    table.remove(EspTable.Interactables.BreakerPoles, table.find(EspTable.Interactables.BreakerPoles, Table))
                end)

            elseif MiscPickups[v.Name] then
				
                repeat task.wait() until v.PrimaryPart

                local Highlight, TextLabel = Esp(v, v.PrimaryPart, MiscPickups[v.Name], Options.ESPI_C_MiscPickups_F.Value, Options.ESPI_C_MiscPickups_O.Value, "MiscPickups")

                local Table = {Highlight, TextLabel}
                table.insert(EspTable.Interactables.MiscPickups, Table)

                v.Destroying:Once(function()
                    table.remove(EspTable.Interactables.MiscPickups, table.find(EspTable.Interactables.MiscPickups, Table))
                end)

            elseif v.Name == "GiggleCeiling" then

                v:WaitForChild("Hitbox", 9e9)
                v.Hitbox.CanTouch = not Toggles.ES_AntiGiggle.Value

                v:WaitForChild("Root", 9e9)
                local Highlight, TextLabel = Esp(v, v.Root, "Giggle", Color3.new(0.9, 0.9, 0.9), "Entities")

                local Table = {Highlight, TextLabel}
                table.insert(EspTable.Entities, Table)

                v.Destroying:Once(function()
                    table.remove(EspTable.Entities, table.find(EspTable.Entities, Table))
                end)

            elseif v.Name == "Snare" then

                v:WaitForChild("Hitbox", 9e9)
                v.Hitbox.CanTouch = not Toggles.ES_AntiSnare.Value

            elseif v.Name == "ChandelierObstruction" then

                v:WaitForChild("HurtPart", 9e9)

                v.HurtPart.CanTouch = not Toggles.ES_AntiChanedlier.Value

            elseif v.Name == "Seek_Arm" then

                v:WaitForChild("AnimatorPart", 9e9)

                v.AnimatorPart.CanTouch = not Toggles.ES_AntiSeekArms.Value

            elseif v.Name == "DoorFake" then

                v:WaitForChild("Hidden", 9e9)
                v.Hidden.CanTouch = not Toggles.ES_AntiDupe.Value

                v:WaitForChild("Lock", 3):WaitForChild("UnlockPrompt")
                if v:FindFirstChild("Lock") then
                    v.Lock.UnlockPrompt.Enabled = not Toggles.ES_AntiDupe.Value
                end

            elseif v.Name == "FigureRig" then

                v:WaitForChild("Torso", 9e9)
                local Highlight, TextLabel = Esp(v, v.Torso, "Figure", Color3.new(0.75, 0, 0), "Entities")

                local Table = {Highlight, TextLabel}
                table.insert(EspTable.Entities, Table)

                v.Destroying:Once(function()
                    table.remove(EspTable.Entities, table.find(EspTable.Entities, Table))
                end)

            elseif v.Name == "_NestHandler" then
                v:WaitForChild("Console", 9e9):WaitForChild("Button", 9e9):WaitForChild("ActivateEventPrompt", 9e9)
                repeat task.wait() until v.Console.Button.ActivateEventPrompt:GetAttribute("Interactions")

                local Anchors = {}

                while not next(Anchors) and task.wait() and not Library.Unloaded do
                    for _, Anchor in v:GetChildren() do
                        if Anchor.Name == "MinesAnchor" and not Anchor:GetAttribute("Activated") then
                            table.insert(Anchors, AnchorIdentify[Anchor.Sign.TextLabel.Text], Anchor)
                        end
                    end

                    local AnchorsIndex = {}
                    for Index in Anchors do
                        table.insert(AnchorsIndex, Index)
                    end

                    local NumberIndex = math.min( unpack(AnchorsIndex) )
                    local NextAnchor = Anchors[NumberIndex]

                    if NumberIndex > 1 then
                        local Code = LocalPlayer.PlayerGui.MainUI.AnchorHintFrame.Code.Text
                        local Offset = tonumber(NextAnchor.Note.SurfaceGui.TextLabel.Text)

                        local Solved = SolveAnchor(Code, Offset)

                        task.spawn(function()
                            while not Library.Unloaded and task.wait() and not NextAnchor:GetAttribute("Activated") do
                                if Toggles.GA_AnchorAutoSolve.Value and (LocalPlayer.Character.Collision.Position - NextAnchor.AnchorBase.Position).Magnitude < 12 then
                                    NextAnchor.AnchorRemote:InvokeServer( tostring(Code) )
                                end
                            end
                        end)

                        if Toggles.GN_AnchorCode.Value then
                            Notify("Anchor code solved.", "The code for Anchor "..NextAnchor.Sign.TextLabel.Text.." is '".. Solved .."'.", 10)
                        end

                        local Highlight, TextLabel = Esp(NextAnchor, NextAnchor.AnchorBase, "( ".. Solved .." ) Anchor "..NextAnchor.Sign.TextLabel.Text, Options.ESPI_C_Anchors_F.Value, Options.ESPI_C_Anchors_O.Value, "Anchors")

                        local Table = {Highlight, TextLabel}
                        table.insert(EspTable.Interactables.Anchors, Table)

                        v.Destroying:Once(function()
                            table.remove(EspTable.Interactables.Anchors, table.find(EspTable.Interactables.Anchors, Table))
                        end)
					else
                        task.spawn(function()
                            local Code = LocalPlayer.PlayerGui.MainUI.MainFrame:WaitForChild("AnchorHintFrame", 9e9).Code.Text

                            while not Library.Unloaded and task.wait() and not NextAnchor:GetAttribute("Activated") do
                                if Toggles.GA_AnchorAutoSolve.Value and (LocalPlayer.Character.Collision.Position - NextAnchor.AnchorBase.Position).Magnitude < 12 then
                                    NextAnchor.AnchorRemote:InvokeServer( tostring(Code) )
                                end
                            end
                        end)

                        local Highlight, TextLabel = Esp(NextAnchor, NextAnchor.AnchorBase, "Anchor "..NextAnchor.Sign.TextLabel.Text, Options.ESPI_C_Anchors_F.Value, Options.ESPI_C_Anchors_O.Value, "Anchors")

                        local Table = {Highlight, TextLabel}
                        table.insert(EspTable.Interactables.Anchors, Table)

                        v.Destroying:Once(function()
                            table.remove(EspTable.Interactables.Anchors, table.find(EspTable.Interactables.Anchors, Table))
                        end)
                    end

                    repeat task.wait() until NextAnchor:GetAttribute("Activated")

                    RemoveEspSmooth(NextAnchor)
                    v.Console.Button.ActivateEventPrompt:GetAttributeChangedSignal("Interactions"):Wait()

                    table.clear(Anchors)
                end
            elseif v.Name == "GrumbleRig" then
                v:WaitForChild("Root", 9e9)
                task.wait(1)

                local Highlight, TextLabel = Esp(v, v, "Grumble", Color3.new(0.85, 0.85, 0.85), "Entities")

                local Table = {Highlight, TextLabel}
                table.insert(EspTable.Entities, Table)

                v.Destroying:Once(function()
                    table.remove(EspTable.Entities, table.find(EspTable.Entities, Table))
                end)
            elseif v.Name == "GloomEgg" then
                v:WaitForChild("Egg", 9e9)

                v.Egg.CanTouch = not Toggles.ES_AntiGloombat.Value
            end

        end

    end),

    workspace.ChildAdded:Connect(function(v)
        if v:IsA("Camera") then

            CameraAdded = workspace.CurrentCamera.ChildAdded:Connect(function(v)

                if v.Name == "Screech" then
                    if Toggles.GN_Entities.Value and Options.GN_Entities_Options.Value["Screech"] then
                        Notify("Entity 'Screech' has spawned!", "Look around and look at it quickly!")
                    end
                elseif v.Name == "LiveSanity" then
                    task.delay(0.2, function()

                        if workspace:FindFirstChild("EntityModel") then
                            v.Enabled = not Toggles.VR_NoHasteEffect.Value
                        end

                    end)
                end

            end)

        elseif v:IsA("Model") then
            if v.Name == "GloombatSwarm" then
                v:WaitForChild("BatsHolder", 9e9)

                v.BatsHolder.ChildAdded:Connect(function(Bat)
                    Bat:WaitForChild("LiveClientBat", 9e9):WaitForChild("Main", 9e9)

                    for _, Sound in Bat.LiveClientBat.Main:GetChildren() do
                        if Sound:IsA("Sound") then
                            Sound:SetAttribute("_Original", Sound.Volume)

                            if Toggles.MA_SilentGloombat.Value then
                                Sound.Volume = 0
                            end
                        end

                    end
                end)

                if Toggles.GN_Entities.Value and Options.GN_Entities_Options.Value["Gloombat Swarm"] then
                    Notify(v:GetAttribute("WaitForOpen") and "A gloombat swarm will occur in the next few rooms." or "A gloombat swarm has spawned!", "Keep off all light sources and keep going!")
                end

            elseif v.Name == "Dread" then

                v:WaitForChild("Main", 9e9)

                Instance.new("Humanoid", v)
                v.Main.Transparency = 0.999

                local Highlight, TextLabel = Esp(v, v.Main, "Dread", Color3.new(0.4, 0.4, 0.4), "Entities")

                local Table = {Highlight, TextLabel}
                table.insert(EspTable.Entities, Table)

                v.Destroying:Once(function()
                    table.remove(EspTable.Entities, table.find(EspTable.Entities, Table))
                end)

                if Toggles.GN_Entities.Value and Options.GN_Entities_Options.Value["Dread"] then
                    Notify("Entity 'Dread' has spawned!", "Open the next door quickly!")
                end

            elseif v.Name == "CustomEntity" then

                local Part

                -- name can be censored sometimes... 😐
                repeat
                    task.wait()
                    Part = v:FindFirstChildWhichIsA("Part")
                until Part

                Instance.new("Humanoid", v)
                Part.Transparency = 0.999

                local Highlight, TextLabel = Esp(v, v, "Rush", Color3.new(0.5, 0.55, 0.6), "Entities")

                local Table = {Highlight, TextLabel}
                table.insert(EspTable.Entities, Table)

                v.Destroying:Once(function()
                    table.remove(EspTable.Entities, table.find(EspTable.Entities, Table))
                end)

                if Toggles.GN_Entities.Value and Options.GN_Entities_Options.Value["Custom Rush"] then
					local String = "Find a hiding spot quickly!"

                    if v:GetAttribute("iterations") > 0 then
						String = "Entity will rebound " .. v:GetAttribute("iterations") .. " times," .. String
					end
                    if v:GetAttribute("damageAmount") <= 0 then
						String = "Entity will not do damage."
                    end

                    Notify("Entity 'Custom Rush' has spawned!", String)
                end

            elseif v.Name == "RushMoving" then

                v:WaitForChild("RushNew", 9e9)

                Instance.new("Humanoid", v)
                v.RushNew.Transparency = 0.999

                local Highlight, TextLabel = Esp(v, v, "Rush", Color3.new(0.35, 0.4, 0.45), "Entities")

                local Table = {Highlight, TextLabel}
                table.insert(EspTable.Entities, Table)

                v.Destroying:Once(function()
                    table.remove(EspTable.Entities, table.find(EspTable.Entities, Table))
                end)

                if Toggles.GN_Entities.Value and Options.GN_Entities_Options.Value["Custom Rush"] then
                    Notify("Entity 'Rush' has spawned!", "Find a hiding spot quickly!")
                end

            elseif v.Name == "AmbushMoving" then

                v:WaitForChild("RushNew", 9e9)

                Instance.new("Humanoid",v)
                v.RushNew.Transparency = 0.999

                local Highlight, TextLabel = Esp(v, v, "Ambush", Color3.fromRGB(80, 255, 110), "Entities")

                local Table = {Highlight, TextLabel}
                table.insert(EspTable.Entities, Table)

                v.Destroying:Once(function()
                    table.remove(EspTable.Entities, table.find(EspTable.Entities, Table))
                end)

                if Toggles.GN_Entities.Value and Options.GN_Entities_Options.Value["Ambush"] then
                    Notify("Entity 'Ambush' has spawned!", "Ambush can rebound 2 - 4 times, find a hiding spot quickly!")
                end

            elseif v.Name == "A60" then

                v:WaitForChild("Main", 9e9)

                Instance.new("Humanoid", v)
                v.Main.Transparency = 0.999

                local Highlight, TextLabel = Esp(v, v.Main, "A-60", Color3.fromRGB(200, 50, 50), "Entities")

                local Table = {Highlight, TextLabel}
                table.insert(EspTable.Entities, Table)

                v.Destroying:Once(function()
                    table.remove(EspTable.Entities, table.find(EspTable.Entities, Table))
                end)

                if Toggles.GN_Entities.Value and Options.GN_Entities_Options.Value["A-60"] then
                    Notify("Entity 'A-60' has spawned!", "Find a hiding spot quickly!")
                end

            elseif v.Name == "A120" then

                v:WaitForChild("Main", 9e9)

                Instance.new("Humanoid", v)
                v.Main.Transparency = 0.999

                local Highlight, TextLabel = Esp(v, v.Main, "A-120", Color3.fromRGB(55, 55, 55), "Entities")

                local Table = {Highlight, TextLabel}
                table.insert(EspTable.Entities, Table)

                v.Destroying:Once(function()
                    table.remove(EspTable.Entities, table.find(EspTable.Entities, Table))
                end)

                if Toggles.GN_Entities.Value and Options.GN_Entities_Options.Value["A-120"] then
                    Notify("Entity 'A-120' has spawned!", "Find a hiding spot quickly!")
                end

            elseif v.Name == "BackdoorRush" then

                v:WaitForChild("Main", 9e9):WaitForChild("AttachmentSwitch", 9e9):WaitForChild("ParticleEmitter", 9e9)

                Instance.new("Humanoid", v)
                v.Main.Transparency = 0.999

                local Highlight, TextLabel = Esp(v, v.Main, "Blitz", Color3.fromRGB(0, 175, 80), "Entities")

                local Table = {Highlight, TextLabel}
                table.insert(EspTable.Entities, Table)

                v.Destroying:Once(function()
                    table.remove(EspTable.Entities, table.find(EspTable.Entities, Table))
                end)

                if Toggles.GN_Entities.Value and Options.GN_Entities_Options.Value["Blitz"] then
                    Notify("Entity 'Blitz' has spawned!", "Blitz can rebound and pause in place at random, Find a hiding spot quickly!", 5)
                end

                local EnableChanged = v.Main.AttachmentSwitch.ParticleEmitter:GetPropertyChangedSignal("Enabled"):Connect(function()
                    local Color = v.Main.AttachmentSwitch.ParticleEmitter.Enabled and Color3.fromRGB(235, 80, 80) or Color3.fromRGB(0, 175, 80)

                    game:GetService("TweenService"):Create( v._LOLHAXHL, TweenInfo.new(2 / 3), { FillColor = Color } ):Play()
                    game:GetService("TweenService"):Create( v._LOLHAXHL, TweenInfo.new(2 / 3), { OutlineColor = Color } ):Play()
                    game:GetService("TweenService"):Create( v._LOLHAXBG.TextLabel, TweenInfo.new(2 / 3), { TextColor3 = Color } ):Play()
                end)

                v.Destroying:Once(function()
                    EnableChanged:Disconnect()
                end)

            elseif v.Name == "Eyes" then

                v:WaitForChild("Core", 9e9):WaitForChild("Ambience", 9e9)

                Instance.new("Humanoid", v)
                v.Core.Transparency = 0.999

                local Highlight, TextLabel = Esp(v, v.Core, "Eyes", Color3.fromRGB(127, 30, 220), "Entities")

                local Table = {Highlight, TextLabel}
                table.insert(EspTable.Entities, Table)

                v.Destroying:Once(function()
                    table.remove(EspTable.Entities, table.find(EspTable.Entities, Table))
                end)

                if Toggles.GN_Entities.Value and Options.GN_Entities_Options.Value["Eyes"] then
                    Notify("Entity 'Eyes' has spawned!", "Avoid looking at it!")
                end

            elseif v.Name == "BackdoorLookman" then

                v:WaitForChild("Core", 9e9):WaitForChild("Ambience", 9e9)

                Instance.new("Humanoid", v)
                v.Core.Transparency = 0.999

                local Highlight, TextLabel = Esp(v, v.Core, "Lookman", Color3.fromRGB(110, 15, 15), "Entities")

                local Table = {Highlight, TextLabel}
                table.insert(EspTable.Entities, Table)

                v.Destroying:Once(function()
                    table.remove(EspTable.Entities, table.find(EspTable.Entities, Table))
                end)

                if Toggles.GN_Entities.Value and Options.GN_Entities_Options.Value["Lookman"] then
                    Notify("Entity 'Lookman' has spawned!", "Avoid looking at it!")
                end

            end

            if EntityDistances[v.Name] then
                task.wait(1)

                local Part = v.PrimaryPart
                v:SetAttribute("_Prediction", Part.Position)

                if Toggles.DS_Debug.Value then
                    local Folder = Instance.new("Folder", workspace)
                    Folder.Name = "LXDebug"

                    for i = 1, 5 do
                        local DebugPart = Instance.new("Part", Folder)
                        DebugPart.CanCollide = false
                        DebugPart.CanQuery = false
                        DebugPart.Anchored = true
                        DebugPart.Name = i
                        DebugPart.Shape = "Ball"
                        DebugPart.Size = Vector3.new(3, 3, 3)

                        Instance.new("Highlight", DebugPart)
                    end
                end

                while task.wait() and v.Parent do
                    task.spawn(function()
                        local LastPosition = Part.Position

                        task.wait(1 / 3)

                        v:SetAttribute("_Prediction", Part.Position - LastPosition)
                    end)
    
                    if Toggles.GA_AutoHide.Value then
                        local IncludeList = {}

                        for _, Room in Rooms:GetChildren() do
                            if Room:FindFirstChild("Assets") then
                                table.insert(IncludeList, Room.Assets)
                            end
                            if Room:FindFirstChild("Parts") then
                                table.insert(IncludeList, Room.Parts)
                            end
                        end

                        local RaycastParams = RaycastParams.new()
                        RaycastParams.FilterDescendantsInstances = IncludeList
                        RaycastParams.FilterType = Enum.RaycastFilterType.Include

                        local Count = {0.2, 0.4, 0.6, 0.8, 1}

                        for i = 1, #Count do -- Raycast before the set time for safety reasons, for example if they have it set very high..
                            local Number = Options.GA_AutoHide_PredictionTime.Value * Count[i]
                            local Prediction = (v:GetAttribute("_Prediction") * 3) * Number

                            if workspace:FindFirstChild("LXDebug") then
                                workspace.LXDebug[i].Position = Part.Position + Prediction
                            end

                            if not LocalPlayer.Character:GetAttribute("Hiding") and Vector3.new(Prediction.X, 0, Prediction.Z).Magnitude > 1 then
                                local PredictionPosition = Part.Position + Prediction

                                local Raycast

                                if Toggles.GA_AutoHide_VisCheck.Value then
                                    Raycast = workspace:Raycast(LocalPlayer.Character.Collision.Position, PredictionPosition - LocalPlayer.Character.Collision.Position, RaycastParams)
                                end

                                if not Raycast and (PredictionPosition - LocalPlayer.Character.Collision.Position).Magnitude <= EntityDistances[v.Name] * Options.GA_AutoHide_PredictionDistanceMultiplier.Value then
                                    local Prompt = GetHiding()

                                    if Prompt then
                                        fireproximityprompt(Prompt)
                                    end
                                end
                            end
                        end
                    end
                end

                if workspace:FindFirstChild("LXDebug") then
                    workspace.LXDebug:Destroy()
                end
            end
        end
    end),
}
table.insert(Connections, CameraAdded)

for i, v in Toggles do
	if i:sub(1, 3) == "ESP" then
		
        local Changed = Toggles[i]:OnChanged(function()
            EspUpdate()
		end)
        table.insert(Connections, Changed)

	end
end
for i, v in Options do
	if i:sub(1, 3) == "ESP" then
		
        local Changed = Options[i]:OnChanged(function()
            EspUpdate()
		end)
        table.insert(Connections, Changed)

	end
end

if game.ReplicatedStorage.FloorReplicated.ClientRemote:FindFirstChild("Haste") then
    local HasteChanged = game.ReplicatedStorage.FloorReplicated.ClientRemote.Haste.Ambience:GetPropertyChangedSignal("Playing"):Connect(function()
        if Toggles.MA_NoHasteSound.Value then
            game.ReplicatedStorage.FloorReplicated.ClientRemote.Haste.Ambience.Playing = false
        end
    end)

    table.insert(Connections, HasteChanged)
end

local namecall
namecall = hookmetamethod(game, "__namecall", newcclosure(function(v, ...)
    local Method = getnamecallmethod()
    local Arguments = {...}

    if not Library.Unloaded then
        if Method == "FireServer" then

            if v.Name == "Crouch" and Toggles.EB_CrouchSpoof.Value then

                Arguments[1] = true

            elseif v.Name == "Underwater" then

                Arguments[1] = false

            elseif v.Name == "Screech" and Toggles.ER_NoScreechDamage.Value then

                local Tool = LocalPlayer.Character:FindFirstChildWhichIsA("Tool")

                Arguments[1] = not (Tool and Tool.Name == "Crucifix") ~= nil

            elseif v.Name == "A90" and Toggles.ER_NoA90Damage.Value then

                Arguments[1] = "didnt"

            elseif v.Name == "ShadeResult" and Toggles.ER_NoShadeDamage.Value then

                return

            end

            return namecall(v, unpack(Arguments))

        elseif Method == "Destroy" then
   
            if v.Name == "PathfindNodes" then
                return
            end

        end
    end

    return namecall(v, ...)
end))

A90Hook = hookfunction(require(LocalPlayer.PlayerGui.MainUI.Initiator.Main_Game.RemoteListener.Modules.A90), function(...)
    if Toggles.ER_NoA90.Value then
        game.ReplicatedStorage.RemotesFolder.A90:FireServer("didnt")
        return
    end

    return A90Hook(...)
end)
ScreechHook = hookfunction(require(LocalPlayer.PlayerGui.MainUI.Initiator.Main_Game.RemoteListener.Modules.Screech), function(...)
    if Toggles.ER_NoScreech.Value then
        game.ReplicatedStorage.RemotesFolder.Screech:FireServer(true)
        return
    end
 
    return ScreechHook(...)
end)
TimothyHook = hookfunction(require(LocalPlayer.PlayerGui.MainUI.Initiator.Main_Game.RemoteListener.Modules.SpiderJumpscare), function(...)
    if Toggles.VR_TimothyJumpscare.Value then
        return
    end

    return TimothyHook(...)
end)

local ReviveHook; ReviveHook = hookfunction(require(game.ReplicatedStorage.ClientModules.ReviveCutscene), function(...)
    if Toggles.VR_NoReviveCutscene.Value then
        return
    end

    return ReviveHook(...)
end)

for _, v in Rooms:GetChildren() do

    if game.ReplicatedStorage.GameData.Floor.Value == "Hotel" and v.Name == "100" then
        local BreakerAdded = v.ChildAdded:Connect(function(ElevatorBreaker)

            if ElevatorBreaker.Name == "ElevatorBreaker" then
                local TextChanged = ElevatorBreaker.SurfaceGui.Frame.Code:GetPropertyChangedSignal("Text"):Connect(function()
                    task.wait()

                    if Toggles.GA_BreakerAutoSolve.Value then
                        local State = ElevatorBreaker.SurfaceGui.Frame.Code.Frame.BackgroundTransparency == 0

                        if ElevatorBreaker.SurfaceGui.Frame.Code.Text == "..." then

                            BreakerAlreadyDone = {}

                        elseif ElevatorBreaker.SurfaceGui.Frame.Code.Text == "??" then

                            for _, v in ElevatorBreaker:GetChildren() do
                                if v.Name == "BreakerSwitch" and v:GetAttribute("ID") == MissingNumber(BreakerAlreadyDone, #BreakerAlreadyDone) then

                                    if State ~= v:GetAttribute("Enabled") then
                                        BreakerThing(v, State)
                                    end

                                    table.insert(BreakerAlreadyDone, MissingNumber(BreakerAlreadyDone, #BreakerAlreadyDone))
                                
                                end
                            end

                        else

                            for _, v in ElevatorBreaker:GetChildren() do
                                if v.Name == "BreakerSwitch" and tonumber(ElevatorBreaker.SurfaceGui.Frame.Code.Text) and v:GetAttribute("ID") == tonumber(ElevatorBreaker.SurfaceGui.Frame.Code.Text) then

                                    if State ~= v:GetAttribute("Enabled") then
                                        BreakerThing(v, State)
                                    end

                                    table.insert(BreakerAlreadyDone, tonumber(ElevatorBreaker.SurfaceGui.Frame.Code.Text))

                                end
                            end

                        end
                    end
                end)

                table.insert(Connections, ElevatorBreaker.Destroying:Once(function()
                    TextChanged:Disconnect()
                end))
            end

        end)

        table.insert(Connections, BreakerAdded)
    end

end
for _, v in Rooms:GetDescendants() do
    task.spawn(function()

        if v:IsA("Model") then
            if v.Name == "Door" and not v:GetAttribute("Opened") then
         
                local RoomID = v:GetAttribute("RoomID")

                if RoomID then
                    local Adornee = v.Door

                    if game.ReplicatedStorage.GameData.Floor.Value == "Hotel" then
                        if RoomID >= 50 and RoomID <= 51 then
                        	Adornee = v
                        end
                    end

                    local Highlight, TextLabel = Esp(Adornee, Adornee, "Door", Options.ESPI_C_Doors_F.Value, Options.ESPI_C_Doors_O.Value, "Doors")

                    local Table = {Highlight, TextLabel}
                    table.insert(EspTable.Interactables.Doors, Table)

                    v.Destroying:Once(function()
                        table.remove(EspTable.Interactables.Doors, table.find(EspTable.Interactables.Doors, Table))
                    end)

                    v.AttributeChanged:Once(function()
                        RemoveEspSmooth(Adornee)
                    end)
                end

            elseif v.Name == "FuseObtain" then

                local Highlight, TextLabel = Esp(v, v, "Generator Fuse", Options.ESPI_C_GeneratorFuses_F.Value, Options.ESPI_C_GeneratorFuses_O.Value, "GeneratorFuses")

                local Table = {Highlight, TextLabel}
                table.insert(EspTable.Interactables.GeneratorFuses, Table)

                v.Destroying:Once(function()
                    table.remove(EspTable.Interactables.GeneratorFuses, table.find(EspTable.Interactables.GeneratorFuses, Table))
                end)

                v.Hitbox.FuseModel.Changed:Once(function()
                    RemoveEspSmooth(v)
                end)

            elseif v.Name == "MinesGenerator" then

                local Highlight, TextLabel = Esp(v, v, "Generator", Options.ESPI_C_Generators_F.Value, Options.ESPI_C_Generators_O.Value, "Generators")

                local Table = {Highlight, TextLabel}
                table.insert(EspTable.Interactables.Generators, Table)

                v.Destroying:Once(function()
                    table.remove(EspTable.Interactables.Generators, table.find(EspTable.Interactables.Generators, Table))
                end)

                v.Lever.Sound.Played:Once(function()
                    RemoveEspSmooth(v)
                end)
            elseif v.Name == "KeyObtain" then

                local Highlight, TextLabel = Esp(v, v, "Door Key", Options.ESPI_C_DoorKeys_F.Value, Options.ESPI_C_DoorKeys_O.Value, "DoorKeys")

                local Table = {Highlight, TextLabel}
                table.insert(EspTable.Interactables.DoorKeys, Table)

                v.Destroying:Once(function()
                    table.remove(EspTable.Interactables.DoorKeys, table.find(EspTable.Interactables.DoorKeys, Table))
                end)

            elseif v.Name == "GoldPile" then
                
                local Highlight, TextLabel = Esp(v, v, "Gold Pile [ "..v:GetAttribute("GoldValue").." ]", Options.ESPI_C_GoldPiles_F.Value, Options.ESPI_C_GoldPiles_O.Value, "GoldPiles")

                local Table = {Highlight, TextLabel}
                table.insert(EspTable.Interactables.GoldPiles, Table)

                v.Destroying:Once(function()
                    table.remove(EspTable.Interactables.GoldPiles, table.find(EspTable.Interactables.GoldPiles, Table))
                end)

            elseif v.Name == "WaterPump" and v.Parent.Name == "Pumps" then
				
                if v.Wheel.ValvePrompt.Enabled then
					local Highlight, TextLabel = Esp(v, v.Wheel, "Water Pump", Options.ESPI_C_WaterPumps_F.Value, Options.ESPI_C_WaterPumps_O.Value, "WaterPumps")

                    local Table = {Highlight, TextLabel}
                    table.insert(EspTable.Interactables.WaterPumps, Table)

                    v.Destroying:Once(function()
                        table.remove(EspTable.Interactables.WaterPumps, table.find(EspTable.Interactables.WaterPumps, Table))
                    end)

                    local WheelChanged; WheelChanged = v.Wheel.ValvePrompt:GetPropertyChangedSignal("Enabled"):Connect(function()
                        if v.Wheel.ValvePrompt.Enabled then return end

                        RemoveEspSmooth(v)
                        WheelChanged:Disconnect()
                    end)
				elseif v.Wheel.Rotation.Z >= 180 then
					v.Wheel.ValvePrompt:GetPropertyChangedSignal("Enabled"):Once(function()

                        local Highlight, TextLabel = Esp(v, v.Wheel, "Water Pump", Options.ESPI_C_WaterPumps_F.Value, Options.ESPI_C_WaterPumps_O.Value, "WaterPumps")

                        local Table = {Highlight, TextLabel}
                        table.insert(EspTable.Interactables.WaterPumps, Table)

                        v.Destroying:Once(function()
                            table.remove(EspTable.Interactables.WaterPumps, table.find(EspTable.Interactables.WaterPumps, Table))
                        end)

                        local WheelChanged; WheelChanged = v.Wheel.ValvePrompt:GetPropertyChangedSignal("Enabled"):Connect(function()
                            if v.Wheel.ValvePrompt.Enabled then return end

                            RemoveEspSmooth(v)
                            WheelChanged:Disconnect()
                        end)

                    end)
				end


            elseif v.Name == "LeverForGate" and not v.ActivateEventPrompt:GetAttribute("Interactions") then

                local Highlight, TextLabel = Esp(v, v.Main, "Gate Lever", Options.ESPI_C_GateLevers_F.Value, Options.ESPI_C_GateLevers_O.Value, "GateLevers")

                local Table = {Highlight, TextLabel}
                table.insert(EspTable.Interactables.GateLevers, Table)

                v.Destroying:Once(function()
                    table.remove(EspTable.Interactables.GateLevers, table.find(EspTable.Interactables.GateLevers, Table))
                end)

                v.ActivateEventPrompt.AttributeChanged:Once(function()
                    RemoveEspSmooth(v)
                    RemoveEspSmooth(v.Main)
                end)

            elseif v.Name == "TimerLever" and not v.ActivateEventPrompt:GetAttribute("Interactions") then

                local Highlight, TextLabel = Esp(v, v.Hitbox, "Timer Lever", Options.ESPI_C_BackroomsLevers_F.Value, Options.ESPI_C_BackroomsLevers_O.Value, "BackroomsLevers")

                local Table = {Highlight, TextLabel}
                table.insert(EspTable.Interactables.BackroomsLevers, Table)

                v.Destroying:Once(function()
                    table.remove(EspTable.Interactables.BackroomsLevers, table.find(EspTable.Interactables.BackroomsLevers, Table))
                end)

                v.ActivateEventPrompt.AttributeChanged:Once(function()
                    RemoveEspSmooth(v)
                end)

            elseif v.Name == "LiveHintBook" then

                local Highlight, TextLabel = Esp(v, v, "Book", Options.ESPI_C_LibraryBooks_F.Value, Options.ESPI_C_LibraryBooks_O.Value, "LibraryBooks")

                local Table = {Highlight, TextLabel}
                table.insert(EspTable.Interactables.LibraryBooks, Table)

                v.Destroying:Once(function()
                    table.remove(EspTable.Interactables.LibraryBooks, table.find(EspTable.Interactables.LibraryBooks, Table))
                end)

            elseif v.Name == "LiveBreakerPolePickup" then

                local Highlight, TextLabel = Esp(v, v, "Breaker Pole", Options.ESPI_C_BreakerPoles_F.Value, Options.ESPI_C_BreakerPoles_O.Value, "BreakerPoles")

                local Table = {Highlight, TextLabel}
                table.insert(EspTable.Interactables.BreakerPoles, Table)

                v.Destroying:Once(function()
                    table.remove(EspTable.Interactables.BreakerPoles, table.find(EspTable.Interactables.BreakerPoles, Table))
                end)

            elseif MiscPickups[v.Name] then
				
                local Highlight, TextLabel = Esp(v, v.PrimaryPart, MiscPickups[v.Name], Options.ESPI_C_MiscPickups_F.Value, Options.ESPI_C_MiscPickups_O.Value, "MiscPickups")

                local Table = {Highlight, TextLabel}
                table.insert(EspTable.Interactables.MiscPickups, Table)

                v.Destroying:Once(function()
                    table.remove(EspTable.Interactables.MiscPickups, table.find(EspTable.Interactables.MiscPickups, Table))
                end)

            elseif v.Name == "GiggleCeiling" then

                local Highlight, TextLabel = Esp(v, v.Root, "Giggle", Color3.new(0.9, 0.9, 0.9), "Entities")

                local Table = {Highlight, TextLabel}
                table.insert(EspTable.Entities, Table)

                v.Destroying:Once(function()
                    table.remove(EspTable.Entities, table.find(EspTable.Entities, Table))
                end)

            elseif v.Name == "FigureRig" then

                local Highlight, TextLabel = Esp(v, v.Torso, "Figure", Color3.new(0.75, 0, 0), "Entities")

                local Table = {Highlight, TextLabel}
                table.insert(EspTable.Entities, Table)

                v.Destroying:Once(function()
                    table.remove(EspTable.Entities, table.find(EspTable.Entities, Table))
                end)

            elseif v.Name == "_NestHandler" then
                v:WaitForChild("Console", 9e9):WaitForChild("Button", 9e9):WaitForChild("ActivateEventPrompt", 9e9)
                repeat task.wait() until v.Console.Button.ActivateEventPrompt:GetAttribute("Interactions")

                local Anchors = {}

                while not next(Anchors) and task.wait() and not Library.Unloaded do
                    for _, Anchor in v:GetChildren() do
                        if Anchor.Name == "MinesAnchor" and not Anchor:GetAttribute("Activated") then
                            table.insert(Anchors, AnchorIdentify[Anchor.Sign.TextLabel.Text], Anchor)
                        end
                    end

                    local AnchorsIndex = {}
                    for Index in Anchors do
                        table.insert(AnchorsIndex, Index)
                    end

                    local NumberIndex = math.min( unpack(AnchorsIndex) )
                    local NextAnchor = Anchors[NumberIndex]

                    if NumberIndex > 1 then
                        local Code = LocalPlayer.PlayerGui.MainUI.AnchorHintFrame.Code.Text
                        local Offset = tonumber(NextAnchor.Note.SurfaceGui.TextLabel.Text)

                        local Solved = SolveAnchor(Code, Offset)

                        task.spawn(function()
                            while not Library.Unloaded and task.wait() and not NextAnchor:GetAttribute("Activated") do
                                if Toggles.GA_AnchorAutoSolve.Value and (LocalPlayer.Character.Collision.Position - NextAnchor.AnchorBase.Position).Magnitude < 12 then
                                    NextAnchor.AnchorRemote:InvokeServer( tostring(Code) )
                                end
                            end
                        end)

                        if Toggles.GN_AnchorCode.Value then
                            Notify("Anchor code solved.", "The code for Anchor "..NextAnchor.Sign.TextLabel.Text.." is '".. Solved .."'.", 10)
                        end

                        local Highlight, TextLabel = Esp(NextAnchor, NextAnchor.AnchorBase, "( ".. Solved .." ) Anchor "..NextAnchor.Sign.TextLabel.Text, Options.ESPI_C_Anchors_F.Value, Options.ESPI_C_Anchors_O.Value, "Anchors")

                        local Table = {Highlight, TextLabel}
                        table.insert(EspTable.Interactables.Anchors, Table)

                        v.Destroying:Once(function()
                            table.remove(EspTable.Interactables.Anchors, table.find(EspTable.Interactables.Anchors, Table))
                        end)
					else
                        task.spawn(function()
                            local Code = LocalPlayer.PlayerGui.MainUI.MainFrame:WaitForChild("AnchorHintFrame", 9e9).Code.Text

                            while not Library.Unloaded and task.wait() and not NextAnchor:GetAttribute("Activated") do
                                if Toggles.GA_AnchorAutoSolve.Value and (LocalPlayer.Character.Collision.Position - NextAnchor.AnchorBase.Position).Magnitude < 12 then
                                    NextAnchor.AnchorRemote:InvokeServer( tostring(Code) )
                                end
                            end
                        end)

                        local Highlight, TextLabel = Esp(NextAnchor, NextAnchor.AnchorBase, "Anchor "..NextAnchor.Sign.TextLabel.Text, Options.ESPI_C_Anchors_F.Value, Options.ESPI_C_Anchors_O.Value, "Anchors")

                        local Table = {Highlight, TextLabel}
                        table.insert(EspTable.Interactables.Anchors, Table)

                        v.Destroying:Once(function()
                            table.remove(EspTable.Interactables.Anchors, table.find(EspTable.Interactables.Anchors, Table))
                        end)
                    end

                    NextAnchor.AttributeChanged:Wait()
                    RemoveEspSmooth(NextAnchor)

                    -- not needed anymore i guess
                    --v.Console.Button.ActivateEventPrompt.AttributeChanged:Wait()

                    table.clear(Anchors)
                end

            elseif v.Name == "GrumbleRig" then
     
                local Highlight, TextLabel = Esp(v, v, "Grumble", Color3.new(0.85, 0.85, 0.85), "Entities")

                local Table = {Highlight, TextLabel}
                table.insert(EspTable.Entities, Table)

                v.Destroying:Once(function()
                    table.remove(EspTable.Entities, table.find(EspTable.Entities, Table))
                end)

            end
        end

    end)
end
for _, Player in game.Players:GetPlayers() do
	if Player == LocalPlayer then continue end

    if Player.Character and Player.Character:FindFirstChild("Humanoid") and Player.Character.Humanoid.Health > 0 then
		local Highlight, TextLabel = Esp(Player.Character, Player.Character.UpperTorso, Player.DisplayName, Options.ESPP_Color_F.Value, Options.ESPP_Color_O.Value, "Players")

        local Table = {Highlight, TextLabel}
        table.insert(EspTable.Players, Table)

        local HealthChanged; HealthChanged = Player.Character.Humanoid:GetPropertyChangedSignal("Health"):Connect(function()
			if Player.Character.Humanoid.Health > 0 then return end

            task.wait(1)
            RemoveEspSmooth(Player.Character)

            table.remove(EspTable.Players, table.find(EspTable.Players, Table))
            HealthChanged:Disconnect()
        end)

        table.insert(Connections, HealthChanged)
	end

    local CharacterAdded = Player.CharacterAdded:Connect(function()
		Player.Character:WaitForChild("Humanoid", 9e9)
		Player.Character:WaitForChild("HumanoidRootPart", 9e9)
        Player.Character:WaitForChild("UpperTorso", 9e9)
        task.wait()

		local Highlight, TextLabel = Esp(Player.Character, Player.Character.UpperTorso, Player.DisplayName, Options.ESPP_Color_F.Value, Options.ESPP_Color_O.Value, "Players")

        local Table = {Highlight, TextLabel}
        table.insert(EspTable.Players, Table)

        local HealthChanged; HealthChanged = Player.Character.Humanoid:GetPropertyChangedSignal("Health"):Connect(function()
			if Player.Character.Humanoid.Health > 0 then return end

            task.wait(1)
            RemoveEspSmooth(Player.Character)

            table.remove(EspTable.Players, table.find(EspTable.Players, Table))
            HealthChanged:Disconnect()
        end)

        table.insert(Connections, HealthChanged)
	end)
    table.insert(Connections, CharacterAdded)

    Player.Destroying:Once(function()
        CharacterAdded:Disconnect()
    end)
end

Options.GN_NotificationAlignment:OnChanged(function()
    for _,v in NotificationHolder:GetChildren() do
        local Alignment = 0.5
        if Options.GN_NotificationAlignment.Value == "Left" then
            Alignment = 1
        elseif Options.GN_NotificationAlignment.Value == "Right" then
            Alignment = 0
        end

        v.AnchorPoint = Vector2.new(Alignment, 0.5)
    end
end)
Options.GN_NotificationOffset_X:OnChanged(function()
    NotificationHolder.Position = UDim2.fromScale(Options.GN_NotificationOffset_X.Value, Options.GN_NotificationOffset_Y.Value)
end)
Options.GN_NotificationOffset_Y:OnChanged(function()
    NotificationHolder.Position = UDim2.fromScale(Options.GN_NotificationOffset_X.Value, Options.GN_NotificationOffset_Y.Value)
end)

Toggles.ES_AlwaysJump:OnChanged(function()
    LocalPlayer.Character:SetAttribute("CanJump", Toggles.ES_AlwaysJump.Value or CanJump)     

    if not Toggles.ES_AlwaysJump.Value then
        CanJump = LocalPlayer.Character:GetAttribute("CanJump")
    end
end)

Toggles.EB_CrouchSpoof:OnChanged(function()
    game.ReplicatedStorage.RemotesFolder.Crouch:FireServer(Toggles.EB_CrouchSpoof.Value)
end)

Toggles.MA_SilentJammin:OnChanged(function()
    -- shit code..

    local Jammin = not game.ReplicatedStorage.LiveModifiers:FindFirstChild("Jammin")

    LocalPlayer.PlayerGui.MainUI.Initiator.Main_Game.Health.Jam.Playing = not (Toggles.MA_SilentJammin.Value or Jammin)
    game.SoundService.Main.Jamming.Enabled = not (Toggles.MA_SilentJammin.Value or Jammin)
end)

Toggles.VR_NoHidingVignette:OnChanged(function()
    LocalPlayer.PlayerGui.MainUI.MainFrame.HideVignette.Image = (Toggles.VR_NoHidingVignette.Value and "rbxassetid://0" or "rbxassetid://6100076320")
end)

Toggles.MA_SilentInteracting:OnChanged(function()
    LocalPlayer.PlayerGui.MainUI.Initiator.Main_Game.PromptService.Triggered.Volume = (Toggles.MA_SilentInteracting.Value and 0 or 0.04)
end)

Options.VV_FieldOfView:OnChanged(function()
    if Options.VV_FieldOfView.Value <= 0 and Main_Game then
        task.wait()

        Main_Game.fovtarget = 70
    end
end)

Toggles.MM_Walkspeed:OnChanged(function()
    task.wait()

    getsenv(LocalPlayer.PlayerGui.MainUI.Initiator.Main_Game.Movement).updatespeed()
end)
Options.MM_Walkspeed_S:OnChanged(function()
    task.wait()

    getsenv(LocalPlayer.PlayerGui.MainUI.Initiator.Main_Game.Movement).updatespeed()
end)

Toggles.ES_AntiGiggle:OnChanged(function()
    for _, Room in Rooms:GetChildren() do

        for _, Giggle in Room:GetChildren() do
            if Giggle:IsA("Model") and Giggle.Name == "GiggleCeiling" then
                Giggle:WaitForChild("Hitbox", 9e9)
                Giggle.Hitbox.CanTouch = not Toggles.ES_AntiGiggle.Value
            end
        end

    end
end)
Toggles.ES_AntiDupe:OnChanged(function()
    for _, v in Rooms:GetDescendants() do

        if v.Name == "DoorFake" and v:IsA("Model") then
            v.Hidden.CanTouch = not Toggles.ES_AntiDupe.Value

            if v:FindFirstChild("Lock") and v.Lock:FindFirstChild("UnlockPrompt") then
                v.Lock.UnlockPrompt.Enabled = not Toggles.ES_AntiDupe.Value
            end
        end

    end
end)
Toggles.ES_AntiSnare:OnChanged(function()
    for _, v in Rooms:GetDescendants() do

        if v.Name == "Snare" and v:FindFirstChild("Hitbox") then
            v.Hitbox.CanTouch = not Toggles.ES_AntiSnare.Value
        end

    end
end)
Toggles.ES_AntiSeekArms:OnChanged(function()
    for _, v in Rooms:GetDescendants() do

        if v.Name == "AnimatorPart" and v:IsA("Part") and v.Parent.Name == "Seek_Arm" then
            v.CanTouch = not Toggles.ES_AntiSeekArms.Value
        end

    end
end)
Toggles.ES_AntiChanedlier:OnChanged(function()
    for _, v in Rooms:GetDescendants() do

        if v.Name == "HurtPart" and v:IsA("Part") and v.Parent.Name == "ChandelierObstruction" then
            v.CanTouch = not Toggles.ES_AntiChanedlier.Value
        end

    end
end)
Toggles.ES_AntiGloombat:OnChanged(function()
    for _, v in Rooms:GetDescendants() do

        if v.Name == "GloomEgg" and v:IsA("Model") then
            v.Egg.CanTouch = not Toggles.ES_AntiGloombat.Value
        end

    end
end)

Toggles.ER_NoShade:OnChanged(function()
    ShadeModule.stuff = (Toggles.ER_NoShade.Value and (function() end) or ShadeFunction)
end)

Toggles.VV_NoLookBob:OnChanged(function()
    if Main_Game then
        Main_Game.spring.Speed = (Toggles.VV_NoLookBob.Value and 9e9 or 8)
    end
end)

Toggles.VW_Ambience:OnChanged(function()
    game.Lighting.GlobalShadows = not Toggles.VW_Ambience.Value
    game.Lighting.OutdoorAmbient = (Toggles.VW_Ambience.Value and Options.VW_Ambience_C.Value or Color3.new(0, 0, 0))
end)
Options.VW_Ambience_C:OnChanged(function()
    game.Lighting.GlobalShadows = not Toggles.VW_Ambience.Value
    game.Lighting.OutdoorAmbient = (Toggles.VW_Ambience.Value and Options.VW_Ambience_C.Value or Color3.new(0, 0, 0))
end)

Toggles.VW_NoFog:OnChanged(function()
    if Atmosphere then
        Atmosphere.Density = (Toggles.VW_NoFog.Value and 0 or OldFog)
    end

    if Toggles.VW_NoFog.Value then
        OldFogEnd = game.Lighting.FogEnd

        game.Lighting.FogEnd = 9999
    else
        game.Lighting.FogEnd = OldFogEnd
    end
end)



Toggles.VR_NoHasteEffect:OnChanged(function()
    for _,v in workspace.CurrentCamera:GetChildren() do
        if v.Name == "LiveSanity" and workspace:FindFirstChild("EntityModel") then
            v.Enabled = not Toggles.VR_NoHasteEffect.Value
        end
    end
end)

Toggles.VR_NoGlitchJumpscare:OnChanged(function()
    GlitchModule.stuff = (Toggles.VR_NoGlitchJumpscare.Value and (function() end) or GlitchFunction)
end)

Toggles.VR_NoVoidEffect:OnChanged(function()
    VoidModule.stuff = (Toggles.VR_NoVoidEffect.Value and (function() end) or VoidFunction)
end)

Toggles.VR_NoSeekEffects:OnChanged(function()
    SeekModule.tease = (Toggles.VR_NoSeekEffects.Value and (function() end) or SeekFunction)
end)

Toggles.MA_SilentGloombat:OnChanged(function()
    local GloombatSwarm = workspace:FindFirstChild("GloombatSwarm")

    if GloombatSwarm then
        for _, Bat in GloombatSwarm.BatsHolder:GetChildren() do

            for _, Sound in Bat.LiveClientBat.Main:GetChildren() do
                if Sound:IsA("Sound") then
                    if not Sound:GetAttribute("_Original") and Sound.Volume >= 0 then
                        Sound:SetAttribute("_Original", Sound.Volume)
                    end

                    Sound.Volume = (Toggles.MA_SilentGloombat.Value and 0 or Sound:GetAttribute("_Original"))
                end
            end
        end
    end
end)

task.spawn(function()
    while task.wait(0.23) and not Library.Unloaded do
        if Toggles.EB_SpeedBypass.Value and ClonedCollision then

            ClonedCollision.Massless = false
            task.wait(0.23)

            -- this is a hate crime
            if LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and LocalPlayer.Character.HumanoidRootPart.Anchored and ClonedCollision then
                ClonedCollision.Massless = true
                task.wait(1)
            end

            -- hacky ass fix bro
            if ClonedCollision then
                ClonedCollision.Massless = true
            end

        end
    end
end)

task.spawn(function()
    while task.wait() and not Library.Unloaded do
        if LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and Toggles.VV_Thirdperson.Value and Options.VV_Thirdperson_K:GetState() then
            for _, v in LocalPlayer.Character:GetChildren() do
                if v:IsA("Accessory") then
                    local Clone = v:FindFirstChildWhichIsA("MeshPart"):Clone()
                    Clone.Parent = ThirdpersonParts
                end
            end

            local Clone = LocalPlayer.Character.Head:Clone()
            Clone.Parent = ThirdpersonParts
            Clone.Material = "SmoothPlastic"

            local ThirdpersonRenderstepped = game:GetService("RunService").RenderStepped:Connect(function()
                if Main_Game then
                    if Toggles.VV_ThirdpersonCamCollision.Value then
                        local RaycastParams = RaycastParams.new()
                        RaycastParams.FilterDescendantsInstances = {LocalPlayer.Character, ThirdpersonParts}
                        RaycastParams.FilterType = Enum.RaycastFilterType.Exclude

                        local Direction = (Main_Game.basecamcf * CFrame.new(Options.VV_ThirdpersonOffset.Value, Options.VV_ThirdpersonOffsetUp.Value, 3.5 * (Options.VV_ThirdpersonDistance.Value / 7.5))).Position - Main_Game.basecamcf.Position
                        local Spherecast = workspace:Spherecast(Main_Game.basecamcf.Position, 0.5, Direction, RaycastParams)

                        if Spherecast and (Spherecast.Instance.CanCollide or Spherecast.Instance.Transparency >= 0.5) then
                            local RayPosition = Main_Game.basecamcf.Position + Direction.Unit * Spherecast.Distance

                            workspace.CurrentCamera.CFrame = CFrame.new(RayPosition, RayPosition + Main_Game.basecamcf.LookVector) * (Toggles.VV_NoCamShake.Value and CFrame.new() or Main_Game.csgo)
                        else
                            workspace.CurrentCamera.CFrame = Main_Game.basecamcf * CFrame.new(Options.VV_ThirdpersonOffset.Value, Options.VV_ThirdpersonOffsetUp.Value, 3.5 * (Options.VV_ThirdpersonDistance.Value / 7.5)) * (Toggles.VV_NoCamShake.Value and CFrame.new() or Main_Game.csgo)
                        end
                    else
                        workspace.CurrentCamera.CFrame = Main_Game.basecamcf * CFrame.new(Options.VV_ThirdpersonOffset.Value, Options.VV_ThirdpersonOffsetUp.Value, 3.5 * (Options.VV_ThirdpersonDistance.Value / 7.5)) * (Toggles.VV_NoCamShake.Value and CFrame.new() or Main_Game.csgo)
                    end
                end
            end)

            repeat task.wait() until Library.Unloaded or not Options.VV_Thirdperson_K:GetState() or not Toggles.VV_Thirdperson.Value
            ThirdpersonRenderstepped:Disconnect()
            ThirdpersonParts:ClearAllChildren()
        end
    end
end)

task.spawn(function()
    while task.wait() and not Library.Unloaded and not PadlockCode_N do
        local Paper = HasItem("LibraryHintPaper")

        if not Paper then
            for _, Player in game.Players:GetPlayers() do
                if Player ~= LocalPlayer and (Player.Character:FindFirstChild("LibraryHintPaper") or Player.Backpack:FindFirstChild("LibraryHintPaper")) then
                    Paper = Player.Character:FindFirstChild("LibraryHintPaper") or Player.Backpack:FindFirstChild("LibraryHintPaper")
                end
            end
        end

        if Paper and Paper:FindFirstChild("UI") and Rooms["50"].Door:FindFirstChild("Padlock") then
            local Code = ""	
            for _, x in Paper.UI:GetChildren() do
                if tonumber(x.Name) then
                    for _, y in LocalPlayer.PlayerGui.PermUI.Hints:GetChildren() do
                        if y.Name == "Icon" then
                            if y.ImageRectOffset == x.ImageRectOffset then
                                Code = Code .. y.TextLabel.Text
                            end
                        end
                    end
                end

                if #Code == 5 then
                    if Toggles.GN_PadlockCode.Value then

                        Notify("Padlock code found!", "The code is... '".. Code .."', this is also printed in console!", 10)
                        print("Nexam | The padlock code is: ".. Code)

                        PadlockCode_N = Code
                    end

                    PadlockCode = Code
                end

                if PadlockCode then break end
            end
        end
    end
end)

-- Everything else vvv

task.spawn(function()
    function updateRPC(Bool)
        local LargeImage =  { assetId = 0, hoverText = "" }
        local State = ""

        if game.ReplicatedStorage.GameData.Floor.Value == "Hotel" then
            State = `[ Door {game.ReplicatedStorage.GameData.LatestRoom.Value} ] In The Hotel`
            LargeImage = { assetId = 16875079348, hoverText = "In The Hotel" }
        elseif game.ReplicatedStorage.GameData.Floor.Value == "Retro" then
            State = `[ Door {game.ReplicatedStorage.GameData.LatestRoom.Value} ] In The Retro Hotel`
            LargeImage = { assetId = 16992279648, hoverText = "In The Retro Hotel" }
        elseif game.ReplicatedStorage.GameData.Floor.Value == "Rooms" then
            State = `[ Room {game.ReplicatedStorage.GameData.LatestRoom.Value} ] In The Rooms`
            LargeImage = { assetId = 16874821428, hoverText = "In The Rooms" }
        elseif game.ReplicatedStorage.GameData.Floor.Value == "Backdoor" then
            State = `[ Door {game.ReplicatedStorage.GameData.LatestRoom.Value - 51} ] In The Backdoor`
            LargeImage = { assetId = 16874352892, hoverText = "In The Backdoor" }
        elseif game.ReplicatedStorage.GameData.Floor.Value == "Mines" then
            State = `[ Door {game.ReplicatedStorage.GameData.LatestRoom.Value + 100} ] In The Mines`
            LargeImage = { assetId = 138779629462354, hoverText = "In The Mines" }
        end

        print("[BloxstrapRPC] {\"command\": \"SetRichPresence\", \"data\": " .. game:GetService("HttpService"):JSONEncode({
            details = Bool and "[ Playing DOORS 👁️ ] Nexam" or "<reset>",
            state = Bool and State or "<reset>",
            largeImage = Bool and LargeImage or { reset = true },
            smallImage = Bool and { assetId = 135488783479977, hoverText = "Nexam Hub | Doors" } or { reset = true }
        }) .. "}")
    end

    task.delay(Options.ESPS_FadeTime.Value, EspUpdate)

    local MenuProperties = Tabs.Config:AddLeftGroupbox("Menu")
    MenuProperties:AddButton("Unload", function()
        Library:Unload()
        Library.Unloaded = true

        for _, Connection in Connections do
            Connection:Disconnect()
        end
        for _, Connection in ClosetConnections do
            Connection:Disconnect()
        end

        ThirdpersonParts:Destroy()
        LXNotifications:Destroy()
        ClonedCollision:Destroy()

        game.Lighting.GlobalShadows = true
        game.Lighting.OutdoorAmbient = Color3.new(0,0,0)

        for _, v in workspace:GetDescendants() do
            if v.Name:sub(1, 7) == "_LOLHAX" then
                v:Destroy()
            end
        end

        LocalPlayer.Character.HumanoidRootPart.CustomPhysicalProperties = OldAccel

        Main_Game.spring.Speed = 8
        Main_Game.fovtarget = 70
        getsenv(LocalPlayer.PlayerGui.MainUI.Initiator.Main_Game.Movement).updatespeed()

        ShadeModule.stuff = ShadeFunction
        GlitchModule.stuff = GlitchFunction
        VoidModule.stuff = VoidFunction
        SeekModule.tease = SeekFunction
    end)

    MenuProperties:AddLabel("Menu bind"):AddKeyPicker("MenuKeybind", { Default = "RightShift", NoUI = true, Text = "Menu keybind" })
    MenuProperties:AddDivider()
    MenuProperties:AddToggle("keybindmenu", { Text = "Show Keybinds", Default = false })

    Toggles.keybindmenu:OnChanged(function()
        Library.KeybindFrame.Visible = Toggles.keybindmenu.Value
    end)

    Library.ToggleKeybind = Options.MenuKeybind

    ThemeManager:SetLibrary(Library)
    ThemeManager:SetFolder("Nexam/Themes")
    ThemeManager:ApplyToTab(Tabs.Config)

    SaveManager:SetLibrary(Library)
    SaveManager:SetFolder("Nexam/Doors3")
    SaveManager:BuildConfigSection(Tabs.Config)
    SaveManager:IgnoreThemeSettings()
    SaveManager:LoadAutoloadConfig()

    local DebugStuff = Tabs.Config:AddRightGroupbox("Other")
    DebugStuff:AddToggle("DS_Debug", { Text = "Enable Debug Mode", Default = false, })
    DebugStuff:AddToggle("DS_BSRPC", { Text = "Bloxstrap RPC", Default = true })

    local RPCRoomChange = game.ReplicatedStorage.GameData.LatestRoom:GetPropertyChangedSignal("Value"):Connect(function() updateRPC(Toggles.DS_BSRPC.Value) end)
    table.insert(Connections, RPCRoomChange)

    Toggles.DS_BSRPC:OnChanged(function()
        updateRPC(Toggles.DS_BSRPC.Value)
    end)

    ErrorMessageOut:Disconnect()
end)
end





local G2L = {};

-- StarterGui.ScreenGui
G2L["1"] = Instance.new("ScreenGui", game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui"));
G2L["1"]["ZIndexBehavior"] = Enum.ZIndexBehavior.Sibling;


-- StarterGui.ScreenGui.Frame
G2L["2"] = Instance.new("Frame", G2L["1"]);
G2L["2"]["BorderSizePixel"] = 0;
G2L["2"]["BackgroundColor3"] = Color3.fromRGB(32, 35, 41);
G2L["2"]["Size"] = UDim2.new(0, 551, 0, 324);
G2L["2"]["Position"] = UDim2.new(0.44974, 0, 0.23869, 0);
G2L["2"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);


-- StarterGui.ScreenGui.Frame.UICorner
G2L["3"] = Instance.new("UICorner", G2L["2"]);



-- StarterGui.ScreenGui.Frame.UIStroke
G2L["4"] = Instance.new("UIStroke", G2L["2"]);
G2L["4"]["Thickness"] = 2;
G2L["4"]["Color"] = Color3.fromRGB(61, 61, 75);


-- StarterGui.ScreenGui.Frame.Frame
G2L["5"] = Instance.new("Frame", G2L["2"]);
G2L["5"]["BorderSizePixel"] = 0;
G2L["5"]["BackgroundColor3"] = Color3.fromRGB(47, 51, 60);
G2L["5"]["Size"] = UDim2.new(0, 131, 0, 324);
G2L["5"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);


-- StarterGui.ScreenGui.Frame.Frame.UICorner
G2L["6"] = Instance.new("UICorner", G2L["5"]);



-- StarterGui.ScreenGui.Frame.Frame
G2L["7"] = Instance.new("Frame", G2L["2"]);
G2L["7"]["BorderSizePixel"] = 0;
G2L["7"]["BackgroundColor3"] = Color3.fromRGB(47, 51, 60);
G2L["7"]["Size"] = UDim2.new(0, 100, 0, 324);
G2L["7"]["Position"] = UDim2.new(0.05626, 0, 0, 0);
G2L["7"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);


-- StarterGui.ScreenGui.Frame.Frame.TextLabel
G2L["8"] = Instance.new("TextLabel", G2L["7"]);
G2L["8"]["BorderSizePixel"] = 0;
G2L["8"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["8"]["TextSize"] = 20;
G2L["8"]["FontFace"] = Font.new([[rbxasset://fonts/families/Nunito.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["8"]["TextColor3"] = Color3.fromRGB(195, 203, 208);
G2L["8"]["BackgroundTransparency"] = 1;
G2L["8"]["Size"] = UDim2.new(0, 200, 0, 50);
G2L["8"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["8"]["Text"] = [[Nexam Hub]];
G2L["8"]["Position"] = UDim2.new(-0.66352, 0, -0.01852, 0);


-- StarterGui.ScreenGui.Frame.Frame.TextButton
G2L["9"] = Instance.new("TextButton", G2L["7"]);
G2L["9"]["BorderSizePixel"] = 0;
G2L["9"]["TextSize"] = 19;
G2L["9"]["TextColor3"] = Color3.fromRGB(195, 203, 208);
G2L["9"]["BackgroundColor3"] = Color3.fromRGB(67, 71, 81);
G2L["9"]["FontFace"] = Font.new([[rbxasset://fonts/families/Nunito.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["9"]["Size"] = UDim2.new(0, 111, 0, 31);
G2L["9"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["9"]["Text"] = [[Key]];
G2L["9"]["Position"] = UDim2.new(-0.21, 0, 0.1358, 0);


-- StarterGui.ScreenGui.Frame.Frame.TextButton.UICorner
G2L["a"] = Instance.new("UICorner", G2L["9"]);



-- StarterGui.ScreenGui.Frame.Frame.TextButton.ImageLabel
G2L["b"] = Instance.new("ImageLabel", G2L["9"]);
G2L["b"]["BorderSizePixel"] = 0;
G2L["b"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["b"]["Image"] = [[rbxassetid://91809027533025]];
G2L["b"]["Size"] = UDim2.new(0, 20, 0, 20);
G2L["b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["b"]["BackgroundTransparency"] = 1;
G2L["b"]["Position"] = UDim2.new(0.06306, 0, 0.16129, 0);


-- StarterGui.ScreenGui.Frame.Frame.TextButton.LocalScript
G2L["c"] = Instance.new("LocalScript", G2L["9"]);



-- StarterGui.ScreenGui.Frame.Frame.TextLabel
G2L["d"] = Instance.new("TextLabel", G2L["7"]);
G2L["d"]["BorderSizePixel"] = 0;
G2L["d"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["d"]["TextSize"] = 20;
G2L["d"]["FontFace"] = Font.new([[rbxasset://fonts/families/Nunito.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["d"]["TextColor3"] = Color3.fromRGB(195, 203, 208);
G2L["d"]["BackgroundTransparency"] = 1;
G2L["d"]["Size"] = UDim2.new(0, 200, 0, 50);
G2L["d"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["d"]["Text"] = [[Account]];
G2L["d"]["Position"] = UDim2.new(0.46648, 0, 0, 0);


-- StarterGui.ScreenGui.Frame.LocalScript
G2L["e"] = Instance.new("LocalScript", G2L["2"]);



-- StarterGui.ScreenGui.Frame.Frame
G2L["f"] = Instance.new("Frame", G2L["2"]);
G2L["f"]["BorderSizePixel"] = 0;
G2L["f"]["BackgroundColor3"] = Color3.fromRGB(43, 46, 53);
G2L["f"]["Size"] = UDim2.new(0, 364, 0, 104);
G2L["f"]["Position"] = UDim2.new(0.28494, 0, 0.1358, 0);
G2L["f"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);


-- StarterGui.ScreenGui.Frame.Frame.UICorner
G2L["10"] = Instance.new("UICorner", G2L["f"]);



-- StarterGui.ScreenGui.Frame.Frame.UIStroke
G2L["11"] = Instance.new("UIStroke", G2L["f"]);
G2L["11"]["Thickness"] = 2;
G2L["11"]["Color"] = Color3.fromRGB(61, 61, 75);


-- StarterGui.ScreenGui.Frame.Frame.TextButton
G2L["12"] = Instance.new("TextButton", G2L["f"]);
G2L["12"]["BorderSizePixel"] = 0;
G2L["12"]["TextSize"] = 14;
G2L["12"]["TextColor3"] = Color3.fromRGB(195, 203, 208);
G2L["12"]["BackgroundColor3"] = Color3.fromRGB(54, 57, 63);
G2L["12"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["12"]["Size"] = UDim2.new(0, 66, 0, 30);
G2L["12"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["12"]["Text"] = [[Confirm]];
G2L["12"]["Position"] = UDim2.new(0.78571, 0, 0.53846, 0);


-- StarterGui.ScreenGui.Frame.Frame.TextButton.UICorner
G2L["13"] = Instance.new("UICorner", G2L["12"]);



-- StarterGui.ScreenGui.Frame.Frame.TextButton.LocalScript
G2L["14"] = Instance.new("LocalScript", G2L["12"]);



-- StarterGui.ScreenGui.Frame.A
G2L["15"] = Instance.new("Frame", G2L["2"]);
G2L["15"]["BorderSizePixel"] = 0;
G2L["15"]["BackgroundColor3"] = Color3.fromRGB(54, 57, 63);
G2L["15"]["Size"] = UDim2.new(0, 256, 0, 30);
G2L["15"]["Position"] = UDim2.new(0.32305, 0, 0.30864, 0);
G2L["15"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["15"]["Name"] = [[A]];


-- StarterGui.ScreenGui.Frame.A.UICorner
G2L["16"] = Instance.new("UICorner", G2L["15"]);



-- StarterGui.ScreenGui.Frame.A.UIStroke
G2L["17"] = Instance.new("UIStroke", G2L["15"]);
G2L["17"]["Thickness"] = 2;
G2L["17"]["Color"] = Color3.fromRGB(64, 67, 73);


-- StarterGui.ScreenGui.Frame.A.TextBox
G2L["18"] = Instance.new("TextBox", G2L["15"]);
G2L["18"]["TextColor3"] = Color3.fromRGB(179, 179, 179);
G2L["18"]["PlaceholderColor3"] = Color3.fromRGB(179, 179, 179);
G2L["18"]["BorderSizePixel"] = 2;
G2L["18"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["18"]["TextSize"] = 14;
G2L["18"]["BackgroundColor3"] = Color3.fromRGB(54, 57, 63);
G2L["18"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["18"]["PlaceholderText"] = [[Enter Your Key]];
G2L["18"]["Size"] = UDim2.new(0, 236, 0, 21);
G2L["18"]["Position"] = UDim2.new(0.04208, 0, 0.12099, 0);
G2L["18"]["BorderColor3"] = Color3.fromRGB(61, 61, 75);
G2L["18"]["Text"] = [[]];


-- StarterGui.ScreenGui.Frame.A.TextBox.UICorner
G2L["19"] = Instance.new("UICorner", G2L["18"]);



-- StarterGui.ScreenGui.Frame.B
G2L["1a"] = Instance.new("Frame", G2L["2"]);
G2L["1a"]["BorderSizePixel"] = 0;
G2L["1a"]["BackgroundColor3"] = Color3.fromRGB(61, 61, 75);
G2L["1a"]["Size"] = UDim2.new(0, 2, 0, 324);
G2L["1a"]["Position"] = UDim2.new(0.23761, 0, -0.00205, 0);
G2L["1a"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1a"]["Name"] = [[B]];


-- StarterGui.ScreenGui.Frame.B.TextLabel
G2L["1b"] = Instance.new("TextLabel", G2L["1a"]);
G2L["1b"]["BorderSizePixel"] = 0;
G2L["1b"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1b"]["TextSize"] = 20;
G2L["1b"]["FontFace"] = Font.new([[rbxasset://fonts/families/Nunito.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["1b"]["TextColor3"] = Color3.fromRGB(195, 203, 208);
G2L["1b"]["BackgroundTransparency"] = 1;
G2L["1b"]["Size"] = UDim2.new(0, 200, 0, 50);
G2L["1b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1b"]["Text"] = [[License Key]];
G2L["1b"]["Position"] = UDim2.new(-10.03351, 0, 0.10494, 0);


-- StarterGui.ScreenGui.Frame.B.C
G2L["1c"] = Instance.new("TextLabel", G2L["1a"]);
G2L["1c"]["BorderSizePixel"] = 0;
G2L["1c"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1c"]["TextSize"] = 16;
G2L["1c"]["FontFace"] = Font.new([[rbxasset://fonts/families/Nunito.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1c"]["TextColor3"] = Color3.fromRGB(195, 203, 208);
G2L["1c"]["BackgroundTransparency"] = 1;
G2L["1c"]["Size"] = UDim2.new(0, 210, 0, 50);
G2L["1c"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1c"]["Text"] = [[You currently have no active keys.]];
G2L["1c"]["Name"] = [[C]];
G2L["1c"]["Position"] = UDim2.new(16.82391, 0, 0.16358, 0);


-- StarterGui.ScreenGui.Frame.Frame
G2L["1d"] = Instance.new("Frame", G2L["2"]);
G2L["1d"]["BorderSizePixel"] = 0;
G2L["1d"]["BackgroundColor3"] = Color3.fromRGB(61, 61, 75);
G2L["1d"]["Size"] = UDim2.new(0, 132, 0, 2);
G2L["1d"]["Position"] = UDim2.new(0, 0, 0.83951, 0);
G2L["1d"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);


-- StarterGui.ScreenGui.Frame.TextLabel
G2L["1e"] = Instance.new("TextLabel", G2L["2"]);
G2L["1e"]["BorderSizePixel"] = 0;
G2L["1e"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["1e"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1e"]["TextSize"] = 14;
G2L["1e"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1e"]["TextColor3"] = Color3.fromRGB(195, 203, 208);
G2L["1e"]["BackgroundTransparency"] = 1;
G2L["1e"]["Size"] = UDim2.new(0, 200, 0, 50);
G2L["1e"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1e"]["Text"] = [[XXXXXXXXXXXXXXXXXXXX]];
G2L["1e"]["Position"] = UDim2.new(0.01639, 0, 0.83951, 0);


-- StarterGui.ScreenGui.Frame.TextLabel.LocalScript
G2L["1f"] = Instance.new("LocalScript", G2L["1e"]);



-- StarterGui.ScreenGui.Frame.Frame
G2L["20"] = Instance.new("Frame", G2L["2"]);
G2L["20"]["BorderSizePixel"] = 0;
G2L["20"]["BackgroundColor3"] = Color3.fromRGB(43, 46, 53);
G2L["20"]["Size"] = UDim2.new(0, 364, 0, 104);
G2L["20"]["Position"] = UDim2.new(0.28494, 0, 0.48148, 0);
G2L["20"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);


-- StarterGui.ScreenGui.Frame.Frame.UICorner
G2L["21"] = Instance.new("UICorner", G2L["20"]);



-- StarterGui.ScreenGui.Frame.Frame.UIStroke
G2L["22"] = Instance.new("UIStroke", G2L["20"]);
G2L["22"]["Thickness"] = 2;
G2L["22"]["Color"] = Color3.fromRGB(61, 61, 75);


-- StarterGui.ScreenGui.Frame.Frame.TextButton
G2L["23"] = Instance.new("TextButton", G2L["20"]);
G2L["23"]["BorderSizePixel"] = 0;
G2L["23"]["TextSize"] = 14;
G2L["23"]["TextColor3"] = Color3.fromRGB(195, 203, 208);
G2L["23"]["BackgroundColor3"] = Color3.fromRGB(54, 57, 63);
G2L["23"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["23"]["Size"] = UDim2.new(0, 141, 0, 30);
G2L["23"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["23"]["Text"] = [[Join ]];
G2L["23"]["Position"] = UDim2.new(0.30495, 0, 0.57692, 0);


-- StarterGui.ScreenGui.Frame.Frame.TextButton.UICorner
G2L["24"] = Instance.new("UICorner", G2L["23"]);



-- StarterGui.ScreenGui.Frame.Frame.TextButton.LocalScript
G2L["25"] = Instance.new("LocalScript", G2L["23"]);



-- StarterGui.ScreenGui.Frame.Frame.TextLabel
G2L["26"] = Instance.new("TextLabel", G2L["20"]);
G2L["26"]["BorderSizePixel"] = 0;
G2L["26"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["26"]["TextSize"] = 20;
G2L["26"]["FontFace"] = Font.new([[rbxasset://fonts/families/Nunito.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["26"]["TextColor3"] = Color3.fromRGB(195, 203, 208);
G2L["26"]["BackgroundTransparency"] = 1;
G2L["26"]["Size"] = UDim2.new(0, 200, 0, 50);
G2L["26"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["26"]["Text"] = [[Discord]];
G2L["26"]["Position"] = UDim2.new(-0.12781, 0, -0.08583, 0);


-- StarterGui.ScreenGui.Frame.Frame.TextLabel
G2L["27"] = Instance.new("TextLabel", G2L["20"]);
G2L["27"]["BorderSizePixel"] = 0;
G2L["27"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["27"]["TextSize"] = 16;
G2L["27"]["FontFace"] = Font.new([[rbxasset://fonts/families/Nunito.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["27"]["TextColor3"] = Color3.fromRGB(195, 203, 208);
G2L["27"]["BackgroundTransparency"] = 1;
G2L["27"]["Size"] = UDim2.new(0, 200, 0, 50);
G2L["27"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["27"]["Text"] = [[To get the Key, Join the Discord.]];
G2L["27"]["Position"] = UDim2.new(0.05626, 0, 0.08725, 0);


-- StarterGui.ScreenGui.Frame.TextLabel
G2L["28"] = Instance.new("TextLabel", G2L["2"]);
G2L["28"]["BorderSizePixel"] = 0;
G2L["28"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["28"]["TextSize"] = 16;
G2L["28"]["FontFace"] = Font.new([[rbxasset://fonts/families/Nunito.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["28"]["TextColor3"] = Color3.fromRGB(195, 203, 208);
G2L["28"]["BackgroundTransparency"] = 1;
G2L["28"]["Size"] = UDim2.new(0, 200, 0, 50);
G2L["28"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["28"]["Text"] = [[Nexam Hub | dsc.gg/Nexam]];
G2L["28"]["Position"] = UDim2.new(0.2196, 0, 0.88046, 0);


-- StarterGui.ScreenGui.Frame.ImageButton
G2L["29"] = Instance.new("ImageButton", G2L["2"]);
G2L["29"]["BorderSizePixel"] = 0;
G2L["29"]["BackgroundColor3"] = Color3.fromRGB(32, 35, 41);
G2L["29"]["Image"] = [[rbxassetid://100949367799602]];
G2L["29"]["Size"] = UDim2.new(0, 25, 0, 25);
G2L["29"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["29"]["Position"] = UDim2.new(0.94555, 0, 0.01852, 0);


-- StarterGui.ScreenGui.Frame.ImageButton.UICorner
G2L["2a"] = Instance.new("UICorner", G2L["29"]);



-- StarterGui.ScreenGui.Frame.ImageButton.LocalScript
G2L["2b"] = Instance.new("LocalScript", G2L["29"]);



-- StarterGui.ScreenGui.LocalScript
G2L["2c"] = Instance.new("LocalScript", G2L["1"]);



-- StarterGui.ScreenGui.Frame.Frame.TextButton.LocalScript
local function C_c()
local script = G2L["c"];
	local button = script.Parent
	local baseColor = Color3.fromRGB(66, 70, 80)
	
	button.BackgroundColor3 = baseColor
	button.AutoButtonColor = false -- prevent hover effects from Roblox
	button.TextColor3 = Color3.fromRGB(255, 255, 255) -- set to white or preferred
	button.TextTransparency = 0 -- ensure it's fully visible
	button.ZIndex = 2
	
	local gradient = Instance.new("UIGradient")
	gradient.Enabled = false
	gradient.Color = ColorSequence.new{
		ColorSequenceKeypoint.new(0.00, Color3.fromRGB(80, 180, 255)),
		ColorSequenceKeypoint.new(0.50, Color3.fromRGB(40, 130, 255)),
		ColorSequenceKeypoint.new(1.00, Color3.fromRGB(80, 180, 255))
	}
	gradient.Rotation = 0
	gradient.Parent = button
	
	local hovered = false
	local offset = 0
	
	task.spawn(function()
		while true do
			if hovered then
				offset += 0.01
				if offset > 1 then offset = 0 end
				gradient.Offset = Vector2.new(offset, 0)
			end
			task.wait(0.03)
		end
	end)
	
	button.MouseEnter:Connect(function()
		hovered = true
		gradient.Enabled = true
	end)
	
	button.MouseLeave:Connect(function()
		hovered = false
		gradient.Enabled = false
		button.BackgroundColor3 = baseColor
	end)
	
end;
task.spawn(C_c);
-- StarterGui.ScreenGui.Frame.LocalScript
local function C_e()
local script = G2L["e"];
	script.Parent.Draggable = true
	script.Parent.Active = true
end;
task.spawn(C_e);
-- StarterGui.ScreenGui.Frame.Frame.TextButton.LocalScript
local function C_14()
local script = G2L["14"];
	local text = script.Parent.Parent.Parent.A.TextBox
	local button = script.Parent
	local othertext = script.Parent.Parent.Parent.B.C
	
	button.MouseButton1Click:Connect(function ()
		if text.Text == "Nexam-Hub-2025.me" then
			othertext.Text = "You currently have an active license."
            loadUI()
		else
			game.StarterGui:SetCore("SendNotification", {
				Title = "Nexam",
				Text = "Incorrect key!",
				Duration = 4,
				Icon = "rbxassetid://135488783479977" -- Replace with any Roblox image ID
			})
		end
	end)
end;
task.spawn(C_14);
-- StarterGui.ScreenGui.Frame.TextLabel.LocalScript
local function C_1f()
local script = G2L["1f"];
	local player = game.Players.LocalPlayer.Name
	local text = script.Parent
	
	text.Text = player
	
end;
task.spawn(C_1f);
-- StarterGui.ScreenGui.Frame.Frame.TextButton.LocalScript
local function C_25()
local script = G2L["25"];
	local button = script.Parent
	
	button.MouseButton1Click:Connect(function()
		setclipboard("discord.gg/GZQK6Ec8c4")
		game.StarterGui:SetCore("SendNotification", {
			Title = "Nexam",
			Text = "Copied to clipboard",
			Duration = 4,
			Icon = "rbxassetid://135488783479977" -- Replace with any Roblox image ID
		})
	end)
	
end;
task.spawn(C_25);
-- StarterGui.ScreenGui.Frame.ImageButton.LocalScript
local function C_2b()
local script = G2L["2b"];
	local gui = script.Parent.Parent.Parent
	local button = script.Parent
	
	button.MouseButton1Click:Connect(function ()
		gui:Destroy()
	end)
end;
task.spawn(C_2b);
-- StarterGui.ScreenGui.LocalScript
local function C_2c()
local script = G2L["2c"];
	local gui = script.Parent
	
	-- Attempt to reparent to CoreGui
	local success, err = pcall(function()
		gui.Parent = game:GetService("CoreGui")
	end)
	
	if not success then
		warn("Failed to parent to CoreGui:", err)
	end
	
end;
task.spawn(C_2c);

return G2L["1"], require;
